<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>zhaops&#39;s blog</title>
    <url>/2020/05/23/README/</url>
    <content><![CDATA[<img src="/2020/05/23/README/index.jpeg">]]></content>
  </entry>
  <entry>
    <title>DockerFile 使用</title>
    <url>/2020/05/23/docker_dockerfile/</url>
    <content><![CDATA[<h3 id="什么是dockerfile"><a href="#什么是dockerfile" class="headerlink" title="什么是dockerfile?"></a>什么是dockerfile?</h3><p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。</p>
<p>docker build命令用于从Dockerfile构建映像。可以在docker build命令中使用-f标志指向文件系统中任何位置的Dockerfile。<br>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile</span><br></pre></td></tr></table></figure>

<h3 id="Dockerfile的基本结构"><a href="#Dockerfile的基本结构" class="headerlink" title="Dockerfile的基本结构"></a>Dockerfile的基本结构</h3><p>Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。</p>
<h3 id="Dockerfile文件说明"><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h3><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是FROM。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。</p>
<h3 id="docker-build-命令详解"><a href="#docker-build-命令详解" class="headerlink" title="docker build 命令详解"></a>docker build 命令详解</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"></span><br><span class="line">--build-arg=[] :设置镜像创建时的变量；</span><br><span class="line"></span><br><span class="line">--cpu-shares :设置 cpu 使用权重；</span><br><span class="line"></span><br><span class="line">--cpu-period :限制 CPU CFS周期；</span><br><span class="line"></span><br><span class="line">--cpu-quota :限制 CPU CFS配额；</span><br><span class="line"></span><br><span class="line">--cpuset-cpus :指定使用的CPU id；</span><br><span class="line"></span><br><span class="line">--cpuset-mems :指定使用的内存 id；</span><br><span class="line"></span><br><span class="line">--disable-content-trust :忽略校验，默认开启；</span><br><span class="line"></span><br><span class="line">-f :指定要使用的Dockerfile路径；</span><br><span class="line"></span><br><span class="line">--force-rm :设置镜像过程中删除中间容器；</span><br><span class="line"></span><br><span class="line">--isolation :使用容器隔离技术；</span><br><span class="line"></span><br><span class="line">--label=[] :设置镜像使用的元数据；</span><br><span class="line"></span><br><span class="line">-m :设置内存最大值；</span><br><span class="line"></span><br><span class="line">--memory-swap :设置Swap的最大值为内存+swap，"-1"表示不限swap；</span><br><span class="line"></span><br><span class="line">--no-cache :创建镜像的过程不使用缓存；</span><br><span class="line"></span><br><span class="line">--pull :尝试去更新镜像的新版本；</span><br><span class="line"></span><br><span class="line">--quiet, -q :安静模式，成功后只输出镜像 ID；</span><br><span class="line"></span><br><span class="line">--rm :设置镜像成功后删除中间容器；</span><br><span class="line"></span><br><span class="line">--shm-size :设置/dev/shm的大小，默认值是64M；</span><br><span class="line"></span><br><span class="line">--ulimit :Ulimit配置。</span><br><span class="line"></span><br><span class="line">--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span><br><span class="line"></span><br><span class="line">--network: 默认 default。在构建期间设置RUN指令的网络模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 实例</span><br><span class="line"></span><br><span class="line">// 使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。</span><br><span class="line">docker build -t runoob/ubuntu:v1 . </span><br><span class="line"></span><br><span class="line">// 使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。</span><br><span class="line">docker build github.com/creack/docker-firefox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 也可以通过 -f Dockerfile 文件的位置：</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -f /path/to/a/Dockerfile .</span></span><br><span class="line"></span><br><span class="line">// 在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t <span class="built_in">test</span>/myapp .</span></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Error response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 部署 MongoDB + MongoDB-express</title>
    <url>/2020/05/27/mongodb_install/</url>
    <content><![CDATA[<h2 id="MongoDB-Docker-镜像安装"><a href="#MongoDB-Docker-镜像安装" class="headerlink" title="MongoDB Docker 镜像安装"></a>MongoDB Docker 镜像安装</h2><p>MongoDB 提供官方镜像，下载安装镜像方法如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取mongo镜像</span></span><br><span class="line">docker pull mongo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取管理页面镜像</span></span><br><span class="line">docker pull mongo-express</span><br></pre></td></tr></table></figure>



<h2 id="MongoDB-容器创建"><a href="#MongoDB-容器创建" class="headerlink" title="MongoDB 容器创建"></a>MongoDB 容器创建</h2><h3 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -v /opt/mongodb/:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=abc123 -d mongo</span><br></pre></td></tr></table></figure>

<p><code>-p</code> 指定容器的端口映射，mongodb 默认端口为 27017</p>
<p><code>-v</code> 为设置容器的挂载目录，这里是将/opt/mongodb/即本机中的目录挂载到容器中的/data/db中，作为 mongodb 的存储目录</p>
<p><code>MONGO_INITDB_ROOT_USERNAME</code> 环境变量，root用户名</p>
<p><code>MONGO_INITDB_ROOT_PASSWORD</code> 环境变量，root密码</p>
<p><code>--name</code> 为设置该容器的名称</p>
<p><code>-d</code> 设置容器以守护进程方式运行</p>
<p><img src="/2020/05/27/mongodb_install/1.png" alt></p>
<h3 id="mongo-express"><a href="#mongo-express" class="headerlink" title="mongo-express"></a>mongo-express</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mongo-express --link mongo  -d -p 8081:8081 -e ME_CONFIG_OPTIONS_EDITORTHEME="3024-night" -e ME_CONFIG_BASICAUTH_USERNAME="mongoexpress" -e ME_CONFIG_BASICAUTH_PASSWORD="mongoexpress" -e ME_CONFIG_MONGODB_ADMINUSERNAME="admin" -e ME_CONFIG_MONGODB_ADMINPASSWORD="abc123"  mongo-express</span><br></pre></td></tr></table></figure>



<h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yaml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"27017:27017"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=abc123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span> </span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">"journald"</span></span><br><span class="line">  <span class="attr">mongo-express:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo-express:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo-express</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8081:8081"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_OPTIONS_EDITORTHEME=3024-night</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_BASICAUTH_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_BASICAUTH_PASSWORD=abc123</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_ADMINUSERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_ADMINPASSWORD=abc123</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">"journald"</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose -f mongo.yml up -d</span><br></pre></td></tr></table></figure>



<p><strong>如果发现密码登录失败，请确认安装之前 宿主机的映射目录里面是空的  /opt/mongodb</strong></p>
<p><img src="/2020/05/27/mongodb_install/2.png" alt></p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP半打开连接及同时打开同时关闭</title>
    <url>/2020/05/24/tcpip_halfopen/</url>
    <content><![CDATA[<h3 id="TCP半打开连接"><a href="#TCP半打开连接" class="headerlink" title="TCP半打开连接"></a>TCP半打开连接</h3><p>如果一方已经关闭或者异常终止连接而另外一方却还不知道，这样的连接就称为半打开连接（Half open connection）。处于半打开的连接，如果双方不进行数据通信，是发现不了问题的，只有在通信是才真正的察觉到这个连接已经处于半打开状态，如果双方不传输数据的话，仍处于连接状态的一方就不会检测另外一方已经出现异常</p>
<p>半打开连接的一个常见的原因是客户端或者服务器突然掉电而不是正常的结束应用程序后再关机，这样即使重新启动后，原来的连接信息已经消失了，对端仍然保持半打开状态，如果需要发数据的话，这边收到之后 其实发现这个连接并不存在了，就会回复RST包告知，这个时候就需要重新建立连接了！</p>
<p>接下来使用SSH协议复制一下这个场景：</p>
<ul>
<li>telnet 链接centos服务器 192.168.179.130 23</li>
<li>建立连接成功，可以在client进行linux操作</li>
</ul>
<p><img src="/2020/05/24/tcpip_halfopen/1.png" alt></p>
<ul>
<li><p>需要模拟服务器出现异常，先关掉网卡，然后关机（关掉网卡，为了避免关机时服务器主动退出发送FIN包）</p>
<ul>
<li><p>我这边复现不了，管理网卡客户端这边就立马监听到断开了；直接关机的话就发送 FIN包了</p>
<p><img src="/2020/05/24/tcpip_halfopen/2.png" alt></p>
</li>
</ul>
</li>
<li><p>重新打开服务器</p>
</li>
<li><p>操作客户端，发现已经出现了异常，无法通信，并提示重新连接， 这个时候实际上客户端发送的包被服务器给RST了，因为之前的连接信息已经丢失了</p>
</li>
<li><p>重新连接之后可以正常的进行通信</p>
</li>
<li><p>服务器重新启动，之前的连接信息都已经丢失，所以它将复位所有信息，因此它不知道数据报文段提到的连接，<strong>处理原则就是接收方以复位做应答</strong></p>
</li>
</ul>
<h3 id="同时打开"><a href="#同时打开" class="headerlink" title="同时打开"></a>同时打开</h3><p>两个应用程序同时彼此执行主动打开的情况，2端的端口需要一致，这就需要双方都熟知端口，这种情况发生的概率很小 ，这里简单的介绍一下</p>
<p>场景：</p>
<ul>
<li><p>PC1的应用程序使用端口7777 与PC2的端口8888  执行主动打开</p>
</li>
<li><p>PC2的应用程序使用端口8888 与PC1的端口7777 执行主动打开</p>
</li>
<li><p>SYN包同时打开对端，这种情况即为同时打开</p>
</li>
</ul>
<p>  <strong>TCP中，对于同时打开它仅建立一条连接而不是两条连接</strong>，状态变迁图如下：同时发送SYN包，然后收到进行确认直接进入ESTABLISHED状态，可以看到同时打开需要连接建立需要4个报文段，比三次握手多一次！</p>
<p>  <img src="/2020/05/24/tcpip_halfopen/3.png" alt></p>
<p>这种情况复现不了，用书上的一张图</p>
<p>​    <img src="/2020/05/24/tcpip_halfopen/4.png" alt></p>
<p>第 1,2行 执行2个 SYN ,第3,4行执行了2个 SYN,ACK</p>
<h3 id="同时关闭"><a href="#同时关闭" class="headerlink" title="同时关闭"></a>同时关闭</h3><p>有同时打开，理所应当的也有同时关闭的场景，TCP协议也允许同时关闭。状态变化可以看到下图了，同时发送FIN包，两端同时执行主动关闭，进入FIN_WAIT_1的状态，从FIN_WAIT_1状态收到FIN包的时候进入CLOSING状态，然后回复ACK，进入TIME_WAIT状态。</p>
<p><img src="/2020/05/24/tcpip_halfopen/5.png" alt></p>
]]></content>
      <categories>
        <category>tcp/ip</category>
      </categories>
      <tags>
        <tag>tcp/ip</tag>
      </tags>
  </entry>
  <entry>
    <title>Apollo(阿波罗)分布式部署.md</title>
    <url>/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。<br><a href="https://github.com/zhaops-hub/apollo" target="_blank" rel="noopener">github地址</a>  </p>
<p>直接搭建多环境Apollo  </p>
<p>Apollo目前支持以下环境：</p>
<ul>
<li>DEV: 开发环境</li>
<li>FAT：测试环境，相当于alpha环境(功能测试)</li>
<li>UAT：集成环境，相当于beta环境（回归测试）</li>
<li>PRO：生产环境  </li>
</ul>
<p>如果希望添加自定义的环境名称，<a href="https://github.com/ctripcorp/apollo/wiki/%E9%83%A8%E7%BD%B2&%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98#42-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">具体步骤可以参考</a></p>
<p><strong>本次部署 dev pro 两套环境</strong></p>
<table>
<thead>
<tr>
<th>IP</th>
<th>部署</th>
</tr>
</thead>
<tbody><tr>
<td>172.16.100.222</td>
<td>dev环境，mysql，包含管理页面 portal</td>
</tr>
<tr>
<td>172.16.100.101</td>
<td>pro环境</td>
</tr>
</tbody></table>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>本次部署是用docker部署<br>因为官方没有提供现成的镜像，但是提供了DockerFile ，需要自己打包</p>
<h3 id="下载源码自己编译，或者直接去github上去下载Release包"><a href="#下载源码自己编译，或者直接去github上去下载Release包" class="headerlink" title="下载源码自己编译，或者直接去github上去下载Release包"></a>下载源码自己编译，或者直接去github上去下载Release包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 下载源码</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;ctripcorp&#x2F;apollo.git</span><br></pre></td></tr></table></figure>

<p>结构如下  </p>
<ul>
<li>apollo-portal: 这个是管理页面</li>
<li>apollo-adminservice: apollo 服务端，相当于后台服务</li>
<li>apollo-configservice: apollo 注册中心</li>
</ul>
<p>一套环境（apollo-adminservice，apollo-configservice）两个服务，apollo-portal只部署一个就可以，可以配置多个环境进行管理</p>
<p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_1.png" alt="image"></p>
<p>编译代码（必须先装jdk 和 Maven ）<br>windows 直接双击 build.bat<br>linux build.sh<br><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_2.png" alt="image"></p>
<p>编译完的截图</p>
<p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_3.png" alt="image"></p>
<h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>Apollo服务端共需要两个数据库：ApolloPortalDB和ApolloConfigDB，我们把数据库、表的创建和样例数据都分别准备了sql文件，只需要导入数据库即可。  </p>
<p>需要注意的是ApolloPortalDB只需要在生产环境部署一个即可，而ApolloConfigDB需要在每个环境部署一套，如fat、uat和pro分别部署3套ApolloConfigDB。</p>
<p>脚本在源码里面   </p>
<p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_4.png" alt="image"></p>
<p>命令行进入到mysql里面，source apolloportaldb.sql source ApolloPortalDB.sql ，或者直接navicat导入  </p>
<p> <img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_5.png" alt="image"></p>
<h4 id="打包镜像-apollo-configservice"><a href="#打包镜像-apollo-configservice" class="headerlink" title="打包镜像 apollo-configservice"></a>打包镜像 apollo-configservice</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先打包镜像，先找到源码里面的DockerFile</span><br><span class="line"># apollo-configservice &gt; src &gt; main &gt; docker &gt; DockerFile</span><br><span class="line"></span><br><span class="line"># Dockerfile for apollo-configservice</span><br><span class="line"># 1. Copy apollo-configservice-$&#123;VERSION&#125;-github.zip to current directory</span><br><span class="line"># 2. Build with: docker build -t apollo-configservice .</span><br><span class="line"># 3. Run with: docker run -p 8080:8080 -e DS_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;fill-in-the-correct-server:3306&#x2F;ApolloConfigDB?characterEncoding&#x3D;utf8&quot; -e DS_USERNAME&#x3D;FillInCorrectUser -e DS_PASSWORD&#x3D;FillInCorrectPassword -d -v &#x2F;tmp&#x2F;logs:&#x2F;opt&#x2F;logs --name apollo-configservice apollo-configservice</span><br><span class="line"></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">MAINTAINER ameizi &lt;sxyx2008@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV VERSION 1.7.0-SNAPSHOT</span><br><span class="line">ENV SERVER_PORT 8080</span><br><span class="line"># DataSource Info</span><br><span class="line">ENV DS_URL &quot;&quot;</span><br><span class="line">ENV DS_USERNAME &quot;&quot;</span><br><span class="line">ENV DS_PASSWORD &quot;&quot;</span><br><span class="line"></span><br><span class="line">RUN echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;main&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;community&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; apk update upgrade \</span><br><span class="line">    &amp;&amp; apk add --no-cache procps unzip curl bash tzdata \</span><br><span class="line">    &amp;&amp; ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime \</span><br><span class="line">    &amp;&amp; echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"></span><br><span class="line">ADD apollo-configservice-$&#123;VERSION&#125;-github.zip &#x2F;apollo-configservice&#x2F;apollo-configservice-$&#123;VERSION&#125;-github.zip</span><br><span class="line"></span><br><span class="line">RUN unzip &#x2F;apollo-configservice&#x2F;apollo-configservice-$&#123;VERSION&#125;-github.zip -d &#x2F;apollo-configservice \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;apollo-configservice&#x2F;apollo-configservice-$&#123;VERSION&#125;-github.zip \</span><br><span class="line">    &amp;&amp; sed -i &#39;$d&#39; &#x2F;apollo-configservice&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; chmod +x &#x2F;apollo-configservice&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; echo &quot;tail -f &#x2F;dev&#x2F;null&quot; &gt;&gt; &#x2F;apollo-configservice&#x2F;scripts&#x2F;startup.sh</span><br><span class="line"></span><br><span class="line">EXPOSE $SERVER_PORT</span><br><span class="line"></span><br><span class="line">CMD [&quot;&#x2F;apollo-configservice&#x2F;scripts&#x2F;startup.sh&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 找到编译好的 apollo-configservice-1.7.0-SNAPSHOT-github.zip 包 ，根据它上面的dockerfile注释，把zip包放到当前目录，就可以打包了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># apollo-configservice &gt; target &gt; apollo-configservice-1.7.0-SNAPSHOT-github.zip</span><br></pre></td></tr></table></figure>
<p> <img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_6.png" alt="image"></p>
<p> 把 dockerfile 和 zip包传到服务上 docker build</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost configservice]# ls</span><br><span class="line">apollo-configservice-1.7.0-SNAPSHOT-github.zip  Dockerfile</span><br><span class="line">[root@localhost configservice]#  docker build -t apollo-configservice .</span><br><span class="line"></span><br><span class="line"># 打包镜像依赖基础镜像 openjdk:8-jre-alpine，如果有网络会自动下载，内网的可以直接导入</span><br></pre></td></tr></table></figure>


<h4 id="打包镜像-apollo-adminservice"><a href="#打包镜像-apollo-adminservice" class="headerlink" title="打包镜像 apollo-adminservice"></a>打包镜像 apollo-adminservice</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先打包镜像，先找到源码里面的DockerFile</span><br><span class="line"># apollo-adminservice &gt; src &gt; main &gt; docker &gt; DockerFile</span><br><span class="line"></span><br><span class="line"># Dockerfile for apollo-adminservice</span><br><span class="line"># 1. Copy apollo-adminservice-$&#123;VERSION&#125;-github.zip to current directory</span><br><span class="line"># 2. Build with: docker build -t apollo-adminservice .</span><br><span class="line"># 3. Run with: docker run -p 8090:8090 -e DS_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;fill-in-the-correct-server:3306&#x2F;ApolloConfigDB?characterEncoding&#x3D;utf8&quot; -e DS_USERNAME&#x3D;FillInCorrectUser -e DS_PASSWORD&#x3D;FillInCorrectPassword -d -v &#x2F;tmp&#x2F;logs:&#x2F;opt&#x2F;logs --name apollo-adminservice apollo-adminservice</span><br><span class="line"></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">MAINTAINER ameizi &lt;sxyx2008@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV VERSION 1.7.0-SNAPSHOT</span><br><span class="line">ENV SERVER_PORT 8090</span><br><span class="line"># DataSource Info</span><br><span class="line">ENV DS_URL &quot;&quot;</span><br><span class="line">ENV DS_USERNAME &quot;&quot;</span><br><span class="line">ENV DS_PASSWORD &quot;&quot;</span><br><span class="line"></span><br><span class="line">RUN echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;main&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;community&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; apk update upgrade \</span><br><span class="line">    &amp;&amp; apk add --no-cache procps unzip curl bash tzdata \</span><br><span class="line">    &amp;&amp; ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime \</span><br><span class="line">    &amp;&amp; echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"></span><br><span class="line">ADD apollo-adminservice-$&#123;VERSION&#125;-github.zip &#x2F;apollo-adminservice&#x2F;apollo-adminservice-$&#123;VERSION&#125;-github.zip</span><br><span class="line"></span><br><span class="line">RUN unzip &#x2F;apollo-adminservice&#x2F;apollo-adminservice-$&#123;VERSION&#125;-github.zip -d &#x2F;apollo-adminservice \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;apollo-adminservice&#x2F;apollo-adminservice-$&#123;VERSION&#125;-github.zip \</span><br><span class="line">    &amp;&amp; sed -i &#39;$d&#39; &#x2F;apollo-adminservice&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; chmod +x &#x2F;apollo-adminservice&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; echo &quot;tail -f &#x2F;dev&#x2F;null&quot; &gt;&gt; &#x2F;apollo-adminservice&#x2F;scripts&#x2F;startup.sh</span><br><span class="line"></span><br><span class="line">EXPOSE $SERVER_PORT</span><br><span class="line"></span><br><span class="line">CMD [&quot;&#x2F;apollo-adminservice&#x2F;scripts&#x2F;startup.sh&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 找到编译好的 apollo-adminservice-1.7.0-SNAPSHOT-github.zip 包 ，根据它上面的dockerfile注释，把zip包放到当前目录，就可以打包了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># apollo-adminservice &gt; target &gt; apollo-adminservice-1.7.0-SNAPSHOT-github.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 dockerfile 和 zip包传到服务上 docker build</span><br><span class="line"></span><br><span class="line">[root@localhost adminservice]# ls</span><br><span class="line">apollo-adminservice-1.7.0-SNAPSHOT-github.zip  Dockerfile</span><br><span class="line">[root@localhost adminservice]#  docker build -t apollo-adminservice .</span><br></pre></td></tr></table></figure>

<h4 id="打包镜像-apollo-portal"><a href="#打包镜像-apollo-portal" class="headerlink" title="打包镜像 apollo-portal"></a>打包镜像 apollo-portal</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先打包镜像，先找到源码里面的DockerFile</span><br><span class="line"># apollo-portal &gt; src &gt; main &gt; docker &gt; DockerFile</span><br><span class="line"></span><br><span class="line"># Dockerfile for apollo-portal</span><br><span class="line"># 1. Copy apollo-portal-$&#123;VERSION&#125;-github.zip to current directory</span><br><span class="line"># 2. Build with: docker build -t apollo-portal .</span><br><span class="line"># 3. Run with: docker run -p 8070:8070 -e DS_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;fill-in-the-correct-server:3306&#x2F;ApolloPortalDB?characterEncoding&#x3D;utf8&quot; -e DS_USERNAME&#x3D;FillInCorrectUser -e DS_PASSWORD&#x3D;FillInCorrectPassword -e DEV_META&#x3D;http:&#x2F;&#x2F;fill-in-dev-meta-server:8080 -e PRO_META&#x3D;http:&#x2F;&#x2F;fill-in-pro-meta-server:8080 -d -v &#x2F;tmp&#x2F;logs:&#x2F;opt&#x2F;logs --name apollo-portal apollo-portal</span><br><span class="line"></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">MAINTAINER ameizi &lt;sxyx2008@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV VERSION 1.7.0-SNAPSHOT</span><br><span class="line">ENV SERVER_PORT 8070</span><br><span class="line"># DataSource Info </span><br><span class="line">ENV DS_URL &quot;&quot;</span><br><span class="line">ENV DS_USERNAME &quot;&quot;</span><br><span class="line">ENV DS_PASSWORD &quot;&quot;</span><br><span class="line"># Environmental variable declaration (meta server url, different environments should have different meta server addresses)</span><br><span class="line">ENV DEV_META &quot;&quot;</span><br><span class="line">ENV FAT_META &quot;&quot;</span><br><span class="line">ENV UAT_META &quot;&quot;</span><br><span class="line">ENV LPT_META &quot;&quot;</span><br><span class="line">ENV PRO_META &quot;&quot;</span><br><span class="line"></span><br><span class="line">RUN echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;main&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;community&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; apk update upgrade \</span><br><span class="line">    &amp;&amp; apk add --no-cache procps unzip curl bash tzdata \</span><br><span class="line">    &amp;&amp; ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime \</span><br><span class="line">    &amp;&amp; echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"></span><br><span class="line">ADD apollo-portal-$&#123;VERSION&#125;-github.zip &#x2F;apollo-portal&#x2F;apollo-portal-$&#123;VERSION&#125;-github.zip</span><br><span class="line"></span><br><span class="line">RUN unzip &#x2F;apollo-portal&#x2F;apollo-portal-$&#123;VERSION&#125;-github.zip -d &#x2F;apollo-portal \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;apollo-portal&#x2F;apollo-portal-$&#123;VERSION&#125;-github.zip \</span><br><span class="line">    &amp;&amp; sed -i &#39;$d&#39; &#x2F;apollo-portal&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; chmod +x &#x2F;apollo-portal&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; echo &quot;tail -f &#x2F;dev&#x2F;null&quot; &gt;&gt; &#x2F;apollo-portal&#x2F;scripts&#x2F;startup.sh</span><br><span class="line"></span><br><span class="line">EXPOSE $SERVER_PORT</span><br><span class="line"></span><br><span class="line">CMD [&quot;&#x2F;apollo-portal&#x2F;scripts&#x2F;startup.sh&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 找到编译好的 apollo-adminservice-1.7.0-SNAPSHOT-github.zip 包 ，根据它上面的dockerfile注释，把zip包放到当前目录，就可以打包了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># apollo-portal &gt; target &gt; apollo-portal-1.7.0-SNAPSHOT-github.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 dockerfile 和 zip包传到服务上 docker build</span><br><span class="line"></span><br><span class="line">[root@localhost portal]# ls</span><br><span class="line">apollo-portal-1.7.0-SNAPSHOT-github.zip  Dockerfile</span><br><span class="line">[root@localhost portal]# docker build -t apollo-portal .</span><br></pre></td></tr></table></figure>

<h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>都打完镜像查看一下 </p>
<p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_7.png" alt="image"></p>
<h4 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h4><p>利用docker-compose 服务编排，比较省事</p>
<p><strong>apollo.yml</strong></p>
<p>包含 adminservice,configservice</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  apollo-configservice:</span><br><span class="line">    container_name: configservice</span><br><span class="line">    image: apollo-configservice:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    # ports:</span><br><span class="line">    #   - &quot;8080:8080&quot;</span><br><span class="line">    network_mode: host </span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server2&#x2F;logs&#x2F;apollo-configservice:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 可通过 SERVER_PORT 指定默认启动端口，ports 也需要对应修改</span><br><span class="line">      # SERVER_PORT: 8080</span><br><span class="line">      # 指定 homePageUrl 为当前宿主的 apollo-configservice 地址，不然会出现无法访问</span><br><span class="line">      # JAVA_OPTS: &quot;-Deureka.instance.homePageUrl&#x3D;http:&#x2F;&#x2F;172.16.100.6:8080&quot;</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloConfigDB?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码 </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      # 服务器的端口</span><br><span class="line">      SERVER_PORT: 8080</span><br><span class="line">      </span><br><span class="line">  apollo-adminservice:</span><br><span class="line">    container_name: adminservice</span><br><span class="line">    image: apollo-adminservice:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    # ports:</span><br><span class="line">    #   - &quot;8090:8090&quot;</span><br><span class="line">    network_mode: host </span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server2&#x2F;logs&#x2F;apollo-adminservice:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 指定 homePageUrl 为当前宿主的 apollo-adminservice 地址，不然会出现无法访问</span><br><span class="line">      # JAVA_OPTS: &quot;-Deureka.instance.homePageUrl&#x3D;http:&#x2F;&#x2F;172.16.100.6:8090&quot;</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloConfigDB?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码 </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      # 服务器的端口</span><br><span class="line">      SERVER_PORT: 8090</span><br><span class="line">    depends_on:</span><br><span class="line">      - apollo-configservice</span><br></pre></td></tr></table></figure>

<p>启动容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost apollo]# docker-compose -f apollo.yml up -d</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<p><a href="http://192.168.179.130:8080/" target="_blank" rel="noopener">http://192.168.179.130:8080/</a> 访问8080页面查看注册情况 </p>
<p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_8.png" alt="image"></p>
<p><strong>portal.yml</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  apollo-portal:</span><br><span class="line">    image: apollo-portal:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    container_name: apollo-portal</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8070:8070&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server1&#x2F;logs&#x2F;apollo-portal:&#x2F;opt&#x2F;logs  </span><br><span class="line">    environment:</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloPortalDB?characterEncoding&#x3D;utf8&quot; </span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码      </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      # META_SERVER 地址，如 http:&#x2F;&#x2F;192.168.100.234:8080,http:&#x2F;&#x2F;192.168.100.234:8081（多个可用,分隔，建议使用 LB 域名）,</span><br><span class="line">      DEV_META: &quot;http:&#x2F;&#x2F;172.16.100.6:8080&quot;</span><br><span class="line">      PRO_META: &quot;http:&#x2F;&#x2F;172.16.100.6:8080&quot;</span><br></pre></td></tr></table></figure>

<p>启动容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost apollo]# docker-compose -f apollo-portal.yml up -d</span><br></pre></td></tr></table></figure>

<p>测试一下</p>
<p><a href="http://192.168.179.130:8070" target="_blank" rel="noopener">http://192.168.179.130:8070</a> 账号密码：apollo,admin </p>
<p>查看系统信息</p>
<p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_9.png" alt="image"></p>
<h3 id="部署多环境"><a href="#部署多环境" class="headerlink" title="部署多环境"></a>部署多环境</h3><p>PRO 生产环境  </p>
<p>其实多环境其实很简单，就是再多部署一个（adminservice,configservice），portal 就部署一套就可以，可以管理多套环境，注意数据库是一个环境一个数据库</p>
<p>生产环境只需要安装 adminservice 和 configservice  </p>
<h4 id="配置数据库-1"><a href="#配置数据库-1" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>生一个 ApolloConfigDBPRO 数据库</p>
<p>进入mysql命令行 source ApolloConfigDBPRO.sql</p>
<p>直接把docker-compose.yml 脚本拿来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  apollo-configservice:</span><br><span class="line">    container_name: configservice</span><br><span class="line">    image: apollo-configservice:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    #ports:</span><br><span class="line">    #  - &quot;8080:8080&quot;</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server2&#x2F;logs&#x2F;apollo-configservice:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 可通过 SERVER_PORT 指定默认启动端口，ports 也需要对应修改</span><br><span class="line">      # SERVER_PORT: 8080</span><br><span class="line">      # 指定 homePageUrl 为当前宿主的 apollo-configservice 地址，不然会出现无法访问</span><br><span class="line">      # JAVA_OPTS: &quot;-Deureka.instance.homePageUrl&#x3D;http:&#x2F;&#x2F;172.16.100.6:8080&quot;</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloConfigDBPRO?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码 </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      SERVER_IP: &quot;172.16.100.6&quot;</span><br><span class="line"></span><br><span class="line">  apollo-adminservice:</span><br><span class="line">    container_name: adminservice</span><br><span class="line">    image: apollo-adminservice:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    # ports:</span><br><span class="line">    #   - &quot;8090:8090&quot;</span><br><span class="line">    network_mode: host # 网络模式</span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server2&#x2F;logs&#x2F;apollo-adminservice:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 指定 homePageUrl 为当前宿主的 apollo-adminservice 地址，不然会出现无法访问</span><br><span class="line">      # JAVA_OPTS: &quot;-Deureka.instance.homePageUrl&#x3D;http:&#x2F;&#x2F;172.16.100.6:8090&quot;</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloConfigDBPRO?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码 </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      SERVER_PORT: 8090</span><br><span class="line">    depends_on:</span><br><span class="line">      - apollo-configservice</span><br></pre></td></tr></table></figure>


<p>启动容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost apollo]# docker-compose -f apollo.yml up -d</span><br></pre></td></tr></table></figure>



<p>测试一下</p>
<p><a href="http://172.16.100.101:8080/" target="_blank" rel="noopener">http://172.16.100.101:8080/</a> 访问8080页面查看注册情况  </p>
<p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_10.png" alt="image"></p>
<h3 id="protal-管理页面配置多集群"><a href="#protal-管理页面配置多集群" class="headerlink" title="protal 管理页面配置多集群"></a>protal 管理页面配置多集群</h3><ul>
<li>找到 apolloportaldb.serverconfig :<ul>
<li>apollo.portal.envs: dev,pro</li>
<li>configView.memberOnly.envs: dev,pro</li>
</ul>
</li>
</ul>
<p>正在环境变量 PRO_META，PRO_META是生产环境对应的变量,直接在docker-compose.yml 配置文件中修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  apollo-portal:</span><br><span class="line">    image: apollo-portal:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    container_name: apollo-portal</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8070:8070&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;logs&#x2F;apollo-portal:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.222:3306&#x2F;ApolloPortalDB?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码      </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      # META_SERVER 地址，如 http:&#x2F;&#x2F;192.168.100.234:8080,http:&#x2F;&#x2F;192.168.100.234:8081（多个可用,分隔，建议使用 LB 域名）,</span><br><span class="line">      DEV_META: &quot;http:&#x2F;&#x2F;172.16.100.222:8080&quot;</span><br><span class="line">      PRO_META: &quot;http:&#x2F;&#x2F;172.16.100.101:8080&quot;</span><br></pre></td></tr></table></figure>


<p>重启portal 容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose -f apollo-portal.yml restart</span><br></pre></td></tr></table></figure>

<p>查看系统信息</p>
<p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_11.png" alt="image"></p>
<p><strong>如果在docker-compose.yml 配置文件里面配置的环境变量不起作用的话</strong><br><strong>首先进入到容器里面查看一下 echo $PRO_META</strong><br><strong>如果输出是空的话，那就是得先把容器卸载再起来，restart 不起作用的。</strong><br><strong>这个一定要注意</strong>  </p>
]]></content>
      <categories>
        <category>Apollo</category>
      </categories>
      <tags>
        <tag>Apollo</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么TCP4次挥手时等待为2MSL？</title>
    <url>/2020/05/24/tcpip_2msl/</url>
    <content><![CDATA[<p>通信所要解决的首要问题就是，<strong>保持通信双方的信息对称，使通信双方处于同步状态。</strong></p>
<p>先来一个例子：<br>罗密欧大学期间写信给中学同学朱丽叶，信的内容如下：</p>
<p><strong>小叶子，我喜欢你！</strong></p>
<p>这封信发出之后，罗密欧无法知道朱丽叶能否收到，只有收到小叶子的回信，才能知道自己的信已经到达对方。</p>
<p>三天之后，小叶子回信了，信的内容如下：</p>
<p><strong>小欧，来信已阅，我也喜欢你…</strong></p>
<p>此时，小叶子眼中双方的状态是：<strong>互相爱慕</strong>！</p>
<p>如果小欧收到回信，小欧眼中双方的状态也是：互相爱慕！</p>
<p>如果小欧没有收到回信，小欧眼中双方的状态是：<strong>单相思</strong>！</p>
<p>小叶子为了杜绝小欧模棱两可的状态，使他与自己达成“<strong>互相爱慕</strong>”的共识，需要做以下工作：</p>
<p>1）先耐心地等小欧的第三封信</p>
<p>2）如果若干天没有收到回信，需要把自己的第二封信再次发出</p>
<p>如果收到了小欧的回信，那么双方的状态终于同步了：“互相爱慕”！</p>
<p>即使2）发生了，N天之后也可以达成同步状态。</p>
<p>之后，双方可以甜言蜜语地谈恋爱了。</p>
<p>TCP四次挥手也遵循相似的套路。</p>
<p>主动断开的一侧为A，被动断开的一侧为B。</p>
<p><strong>第一个消息：A发FIN</strong></p>
<p><strong>第二个消息：B回复ACK（回复的同时把tcp链接关掉，tcp处于半关闭状态）</strong></p>
<p><strong>第三个消息：B发出FIN</strong></p>
<p>此时此刻：B单方面认为自己与A达成了共识，即双方都同意关闭连接。</p>
<p>此时，B能释放这个TCP连接占用的内存资源吗？<strong>不能，B一定要确保A收到自己的ACK、FIN。</strong></p>
<p>所以B需要静静地等待A的第四个消息的到来：</p>
<p><strong>第四个消息：A发出ACK，用于确认收到B的FIN</strong></p>
<p>当B接收到此消息，即认为双方达成了同步：双方都知道连接可以释放了，此时B可以安全地释放此TCP连接所占用的内存资源、端口号。</p>
<p>所以<strong>被动关闭的B无需任何wait time，直接释放资源。</strong></p>
<p>但，A并不知道B是否接到自己的ACK，A是这么想的：</p>
<p>1）如果B没有收到自己的ACK，会超时重传FiN</p>
<p>那么A再次接到重传的FIN，会再次发送ACK</p>
<p>2）如果B收到自己的ACK，也不会再发任何消息，包括ACK</p>
<p>无论是1还是2，A都需要等待，要取这两种情况等待时间的最大值，<strong>以应对最坏的情况发生</strong>，这个最坏情况是：</p>
<p>去向ACK消息最大存活时间（MSL) + 来向FIN消息的最大存活时间(MSL)。</p>
<p>这恰恰就是<strong>2MSL( Maximum Segment Life)。</strong></p>
<p>等待2MSL时间，A就可以放心地释放TCP占用的资源、端口号，<strong>此时可以使用该端口号连接任何服务器。</strong></p>
<p><strong>为何一定要等2MSL？</strong><br><strong>如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突，为避免此种情况，需要耐心等待网络老的TCP连接的活跃报文全部死翘翘，2MSL时间可以满足这个需求（尽管非常保守）！</strong></p>
]]></content>
      <categories>
        <category>tcp/ip</category>
      </categories>
      <tags>
        <tag>tcp/ip</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP协议连接复位(RST)</title>
    <url>/2020/05/24/tcpip_rst/</url>
    <content><![CDATA[<p>tcp连接异常终止的情况。一般来说，导致这种情况的原因一般有很多种，比如：</p>
<ul>
<li><p>拒绝连接请求，比如：A想和B建立tcp连接，但是A的连接请求中使用了一个不存在的端口（比如：这个端口超出65535的范围），那么B就可以发送RST报文段拒绝这个请求。</p>
</li>
<li><p>异常终止连接，如:A和B的tcp连接出现了异常，然后B希望终止这条异常的连接，于是就可以发送一个RST报文段终止这个连接</p>
</li>
<li><p>终止空闲的连接，如A和B之间的tcp连接已经很久没有传输数据了，空闲太长时间，可以发送RST报文段来终止这个连接。</p>
</li>
</ul>
<p>  这里我们只针对拒绝连接请求和异常终止连接做详细介绍。</p>
<h3 id="拒绝连接"><a href="#拒绝连接" class="headerlink" title="拒绝连接"></a>拒绝连接</h3><p><img src="/2020/05/24/tcpip_rst/1.png" alt></p>
<p>拒绝连接一般是由服务器主动发起的，因为客户端发起请求连接携带的目的端口，可能服务器并没有开启LISTEN状态。因此服务器在收到这样的报文段后会发送一个RST报文段，在这个报文里把RST和ACK都置为1，它确认了SYN报文段并同时重置了该tcp连接，然后服务器等待另一个连接。客户端在收到RST+ACK报文段后就会进入CLOSED状态。</p>
<p>telnet 登录一个没有的端口，用wireshark 抓包查看</p>
<p>telnet登录和发送SYN序号</p>
<p><img src="/2020/05/24/tcpip_rst/2.png" alt></p>
<p><img src="/2020/05/24/tcpip_rst/3.png" alt></p>
<p>服务端抓包服务器，rst，ack 报文</p>
<p><img src="/2020/05/24/tcpip_rst/4.png" alt></p>
<h3 id="异常终止连接"><a href="#异常终止连接" class="headerlink" title="异常终止连接"></a>异常终止连接</h3><p><img src="/2020/05/24/tcpip_rst/5.png" alt></p>
<p>出现异常终止连接的原因有很多种，可能是进程出现bug了或者由于数据出现了不一致（不想发送数据了），对于这种情况，tcp有可能终止一条连接。也就是说，在这些情况下，就可以发送RST报文段异常终止连接。</p>
<p>客户端由于队列中的数据出现了不一致，发送了RST+ACK报文段异常终止连接，注意：在发送RST+ACK报文段的时候会丢弃掉队列中的所有数据，服务器也会把队列中的所有数据都丢弃掉，并通过一个ICMP差错报告报文通知服务器，然后双方都进入CLOSED状态。</p>
<p>在一些情况下，我们可能想让服务端把数据发送完，然后再关闭tcp连接，而不是马上发送RST报文终止这条连接，那么可以在套接字编程中使用SO_LINGER选项。SO_LINGER选项是用来设置延迟关闭的时间，等待套接字发送缓冲区中的数据发送完成，但是并不保证数据一定会被对方接收，只是等待一段时间后，再正常关闭tcp连接。如果SO_LINGER设置为0，则会清除队列中的所有数据，直接发送RST报文关闭连接</p>
<p><strong>需要注意的是：对于RST报文段，另一端不需要发送任何响应，因为发送完RST报文后，这条tcp连接就关闭了，也就没有必要确认了</strong>，收到RST的一方将终止该连接，并通知应用层复位连接。</p>
]]></content>
      <categories>
        <category>tcp/ip</category>
      </categories>
      <tags>
        <tag>tcp/ip</tag>
      </tags>
  </entry>
</search>
