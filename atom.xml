<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhaops&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhaops-hub.github.io/"/>
  <updated>2020-05-30T02:10:13.609Z</updated>
  <id>https://zhaops-hub.github.io/</id>
  
  <author>
    <name>zhaops</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP滑动窗口协议</title>
    <link href="https://zhaops-hub.github.io/2020/05/29/tcpip_slidingwindow/"/>
    <id>https://zhaops-hub.github.io/2020/05/29/tcpip_slidingwindow/</id>
    <published>2020-05-29T15:41:08.000Z</published>
    <updated>2020-05-30T02:10:13.609Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/05/29/tcpip_slidingwindow/1.png" alt></p><p>滑动窗口协议（Sliding Window Protocol），属于TCP协议的一种应用，用于网络数据传输时的流量控制，以避免拥塞的发生。该协议允许发送方在停止并等待确认前发送多个数据分组。由于发送方不必每发一个分组就停下来等待确认，因此该协议可以加速数据的传输，提高网络吞吐量</p><p>TCP通过滑动窗口的概念来进行流量控制。设想在发送端发送数据的速度很快而接收端接收速度却很慢的情况下，为了保证数据不丢失，显然需要进行流量控制， 协调好通信双方的工作节奏。所谓滑动窗口，可以理解成接收端所能提供的缓冲区大小。TCP利用一个滑动的窗口来告诉发送端对它所发送的数据能提供多大的缓 冲区。由于窗口由16位bit所定义，所以接收端TCP 能最大提供65535个字节的缓冲。由此，可以利用窗口大小和第一个数据的序列号计算出最大可接收的数据序列号。 </p><p>滑动窗口本质上是描述接受方的TCP数据报缓冲区大小的数据，发送方根据这个数据来计算自己最多能发送多长的数据。如果发送方收到接受方的窗口大小为0的TCP数据报，那么发送方将停止发送数据，等到接受方发送窗口大小不为0的数据报的到来。 </p><ul><li>窗口合拢：当窗口从左边向右边靠近的时候，这种现象发生在数据被发送和确认的时候。  </li><li>窗口张开：当窗口的右边沿向右边移动的时候，这种现象发生在接受端处理了数据以后。  </li><li>窗口收缩：当窗口的右边沿向左边移动的时候，这种现象不常发生。  </li><li>TCP就是用这个窗口，慢慢的从数据的左边移动到右边，把处于窗口范围内的数据发送出去（但不用发送所有，只是处于窗口内的数据可以发送。）。这就是窗口的意义。窗口的大小是可以通过socket来制定的，4096并不是最理想的窗口大小，而16384则可以使吞吐量大大的增加。</li></ul><p>A————C————B</p><p>如上图，A与B之间建立TCP连接，滑动窗口实现有两个作用： </p><p>由于对称性，只考虑A端发送窗口和B端接收窗口，有如下两个作用  </p><ul><li>B端来不及处理接收数据（控制不同速率主机间的同步），这时，A通过B端通知的接收窗口而减缓数据的发送。  </li><li>B端来得及处理接收数据，但是在A与B之间某处如C，使得AB之间的整体带宽性能较差，此时，A端根据拥塞处理策略（慢启动，加倍递减和缓慢增加）来更新窗口，以决定数据的发送。  </li></ul><p>与固定大小的滑窗协议相比，TCP采用可变大小的滑窗协议是为了取得更好的性能。  </p><p>TCP是一个广域网协议，而广域网环境下的路由器和主机，各自有着不同的性能和处理能力，在这种情况下，采用固定窗口大小的滑窗协议会引起性能上的损失。TCP规定窗口的大小是由接收方通告的，通过采取慢启动和拥塞避免算法等机制来使带宽和性能取得最佳。</p><ul><li>“窗口”对应的是一段可以被发送者发送的字节序列，其连续的范围称之为“窗口”；</li><li>“滑动”则是指这段“允许发送的范围”是可以随着发送的过程而变化的，方式就是按顺序“滑动”。<ul><li>TCP协议的两端分别为发送者A和接收者B，由于是全双工协议，因此A和B应该分别维护着一个独立的发送缓冲区和接收缓冲区，由于对等性（A发B收和B发A收），我们以A发送B接收的情况作为例子；</li><li>发送窗口是发送缓存中的一部分，是可以被TCP协议发送的那部分，其实应用层需要发送的所有数据都被放进了发送者的发送缓冲区；</li><li>发送窗口中相关的有四个概念：已发送并收到确认的数据（不再发送窗口和发送缓冲区之内）、已发送但未收到确认的数据（位于发送窗口之中）、允许发送但尚未发送的数据以及发送窗口外发送缓冲区内暂时不允许发送的数据</li><li>每次成功发送数据之后，发送窗口就会在发送缓冲区中按顺序移动，将 新的数据包含到窗口中准备发送；</li></ul></li></ul><p>TCP建立连接的初始，B会告诉A自己的接收窗口大小，比如为‘20’：字节31-50为发送窗口。</p><p><img src="/2020/05/29/tcpip_slidingwindow/2.png" alt></p><p>根据B给出窗口值，A构造自己的窗口</p><p>A发送11个字节后，发送窗口位置不变，B接收到了乱序的数据分组：</p><p><img src="/2020/05/29/tcpip_slidingwindow/3.png" alt></p><p>A发了11个字节数据</p><p>只有当A成功发送了数据，即发送的数据得到了B的确认之后，才会移动滑动窗口离开已发送的数据；同时B则确认连续的数据分组，对于乱序的分组则先接收下来，避免网络重复传递：</p><p><img src="/2020/05/29/tcpip_slidingwindow/4.png" alt></p><p>A收到新的确认号，窗口向前滑动</p><p>​                                                <img src="/2020/05/29/tcpip_slidingwindow/5.png" alt></p><p>发送窗口内的序号都属于已发送但未被确认</p><p>所谓流量控制，主要是接收方传递信息给发送方，使其不要发送数据太快，是一种端到端的控制。主要的方式就是返回的ACK中会包含自己的接收窗口的大小，并且利用大小来控制发送方的数据发送：</p><p>​    </p><p>​    <img src="/2020/05/29/tcpip_slidingwindow/6.png" alt></p><p>这里面涉及到一种情况，如果B已经告诉A自己的缓冲区已满，于是A停止发送数据；等待一段时间后，B的缓冲区出现了富余，于是给A发送报文告诉A我的rwnd大小为400，但是这个报文不幸丢失了，于是就出现A等待B的通知||B等待A发送数据的死锁状态。为了处理这种问题，TCP引入了持续计时器（Persistence timer），当A收到对方的零窗口通知时，就启用该计时器，时间到则发送一个1字节的探测报文，对方会在此时回应自身的接收窗口大小，如果结果仍未0，则重设持续计时器，继续等待。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2020/05/29/tcpip_slidingwindow/1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;滑动窗口协议（Sliding Window Protocol），属于TCP协议的一种应用，用于网络数据传输时的流量控制，以避免拥塞的发生。该协议允许发送
      
    
    </summary>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/categories/tcp-ip/"/>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>移位存储详解</title>
    <link href="https://zhaops-hub.github.io/2020/05/28/c_shift/"/>
    <id>https://zhaops-hub.github.io/2020/05/28/c_shift/</id>
    <published>2020-05-28T12:41:08.000Z</published>
    <updated>2020-05-28T15:34:15.286Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IEEE-754-浮点数存储标准"><a href="#IEEE-754-浮点数存储标准" class="headerlink" title="IEEE 754 浮点数存储标准"></a>IEEE 754 浮点数存储标准</h3><p>规定浮点数格式如下：</p><p><img src="/2020/05/28/c_shift/1.png" alt></p><p>s表示符号位，当s=0，V为正数；当s=1，V为负数</p><p>E表示8位阶码，采用移位存储</p><p>M表示23位尾数，如M为10100….，那么M所代表的二进制浮点数为M’=1+1/2+1/2^2=1.75，2&gt;M’&gt;=1</p><p>根据32位数计算为十进制：V=(−1)^s × M’ × 2^(E−127)，</p><h3 id="移位存储详解"><a href="#移位存储详解" class="headerlink" title="移位存储详解"></a>移位存储详解</h3><p>如果采用传统的高bit表示正负的方法，将-127-127分为两个区间表示：</p><p>第一个区间：0 000000 0~ 0 111111 1 即 +0 到 127</p><p>第二个区间：1 000000 0~ 1 111111 1 即 -0 到 -127</p><p>很明显存在+0和-0的问题，如果采用移位存储技术，即在原始数值的基础上加 127，全部转换为&gt;=0的数进行表示：</p><p>此时最高位不是符号位，8bit可以表示0<del>255，那么原始数值可以表示-127</del>128，分别如下</p><p>第一个区间：0 000000 0~ 0 111111 1 ，直接大小0~127 ，减去127后表达范围 -127 到 0</p><p>第二个区间：1 000000 0~ 1 111111 1 ，直接大小128~255，减去127后表达范围 1 到 128</p><p>也就是可以使用 8位二进制来表示从 -127~128 共计 127个负数+零（0）+128个正数总共 256个数，且使用移位存储即没有+0和-0的问题，又充分的使用这个新生成的 8位二进制数来最大限度的表示单精度浮点数的幂指数（阶码）</p><hr><p>如果不用以为存储，有 正0 负0 的问题</p><p>自己搞几个例子</p><p>0: <code>0 + 127 = 127</code>   <code>0 000000 0 + 0 111111 1 = 0 111111 1</code></p><p>1: <code>1 + 127 = 128</code>  <code>0 000000 1 + 0 111111 1 = 1 000000 0</code></p><p>2: <code>2 + 127 = 129</code>   <code>0 000001 0 + 111111 1 = 1 000000 1</code></p><p>-1: <code>-1 + 127 = 126, 127 - 1</code>  <code>0 111111 1 - 0 000000 1 = 0 111111 0</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;IEEE-754-浮点数存储标准&quot;&gt;&lt;a href=&quot;#IEEE-754-浮点数存储标准&quot; class=&quot;headerlink&quot; title=&quot;IEEE 754 浮点数存储标准&quot;&gt;&lt;/a&gt;IEEE 754 浮点数存储标准&lt;/h3&gt;&lt;p&gt;规定浮点数格式如下：&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="C语言" scheme="https://zhaops-hub.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://zhaops-hub.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>浮点数转换二进制</title>
    <link href="https://zhaops-hub.github.io/2020/05/28/c_float/"/>
    <id>https://zhaops-hub.github.io/2020/05/28/c_float/</id>
    <published>2020-05-28T12:41:08.000Z</published>
    <updated>2020-05-28T14:47:20.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浮点数在计算机中是如何表示的？"><a href="#浮点数在计算机中是如何表示的？" class="headerlink" title="浮点数在计算机中是如何表示的？"></a>浮点数在计算机中是如何表示的？</h2><p>浮点数在计算机中的存储方式遵循IEEE 754 浮点数计数标准，可以表示为：</p><p><img src="/2020/05/28/c_float/1.png" alt></p><p>采用<strong>尾数 + 阶码</strong>的编码方式，更通俗一点说，就是类似于数学课本上所学的<strong>科学计数法</strong>表示方式：<strong>有效数字 + 指数位</strong>！</p><p>因此，只要给出：<strong>符号（S）</strong>、<strong>阶码部分（E）</strong>、<strong>尾数部分（M）</strong> 这三个维度的信息，一个浮点数的表示就完全确定下来了，所以<code>float</code>和<code>double</code>这两种类型的浮点数在计算机中的存储结构就表示成下图所示这个样子：</p><p><img src="/2020/05/28/c_float/2.png" alt></p><ul><li><p><strong>符号部分（S）</strong></p><p><code>0</code>-正 <code>1</code>-负</p></li><li><p><strong>阶码部分（E）（指数部分）</strong></p><p>对于<code>float</code>型浮点数，指数部分<code>8</code>位，考虑可正可负，因此可以表示的指数范围为<code>-127 ~ 128</code></p><p>对于<code>double</code>型浮点数，指数部分<code>11</code>位，考虑可正可负，因此可以表示的指数范围为<code>-1023 ~ 1024</code></p></li><li><p><strong>尾数部分（M）</strong></p><p>浮点数的精度是由尾数的位数来决定的：</p><ul><li>对于<code>float</code>型浮点数，尾数部分<code>23</code>位，换算成十进制就是 <code>2^23=8388608</code>，所以十进制精度只有<code>6 ~ 7</code>位；</li><li>对于<code>double</code>型浮点数，尾数部分<code>52</code>位，换算成十进制就是 <code>2^52 = 4503599627370496</code>，所以十进制精度只有<code>15 ~ 16</code>位</li></ul></li></ul><p>以，浮点数交给计算机存储的时候，可能会有<strong>精度丢失</strong>问题！！！因此使用时需要格外小心，如果真因为这一块出了bug，定位问题还是非常艰难的，所以预防工作要做好。</p><h2 id="先来个简单的例子"><a href="#先来个简单的例子" class="headerlink" title="先来个简单的例子"></a>先来个简单的例子</h2><p>比如：<strong>把十进制小数<code>0.875</code>转换成二进制，具体怎么操作？</strong></p><ul><li><p><strong>以小数点为界，拆分</strong></p></li><li><p><strong>整数部分转换</strong></p><p>整数转二进制我想大家应该都熟悉，使用：<strong>除2取余法</strong> 即可。而这里的<code>0.875</code>整数部分为0，无需操作</p></li><li><p><strong>小数部分转换</strong></p><p>小数部分的转换不同于整数部分，采用的是 <strong>“乘2取整法”</strong> ，图示一下就明白了</p><p><img src="/2020/05/28/c_float/3.png" alt></p></li><li><p><strong>合并结果</strong></p><p><code>整数部分 + 小数部分</code>，最终得到二进制结果为<code>0.111</code>。</p></li></ul><p>  所以该结果按照上一节所述的<strong>尾数 + 阶码</strong>的计算机计数方式，则可以表示为：</p><p>  <img src="/2020/05/28/c_float/4.png" alt></p><p>  <strong>0.111 = 1.11*2^-1</strong>  类似于科学计数法</p><p>  所以对应可得：</p><ul><li><strong>符号位</strong>：<code>0</code></li><li><strong>阶码（E）部分</strong>：若以<code>float</code>为例，应为 <code>127 +（-1）= 126</code>，因此二进制表示为：<code>01111110</code></li><li><strong>尾数部分（M）</strong>：若以<code>float</code>为例，应为<code>23</code>位，因此尾部补齐后为<code>11000000000000000000000</code></li></ul><p>因此最终的总结果为（以<code>32</code>位精度<code>float</code>表示）：</p><p><code>00111111011000000000000000000000</code></p><h2 id="再来个复杂点例子"><a href="#再来个复杂点例子" class="headerlink" title="再来个复杂点例子"></a>再来个复杂点例子</h2><p>再比如：<strong>把十进制小数<code>6.36</code>转换成二进制，具体怎么操作？</strong></p><p><img src="/2020/05/28/c_float/5.png" alt></p><p>整数部分 + 小数部分，因此最终得到的结果二进制结果为<code>110.01011100...</code>。</p><p>还是按照上一节所述的<strong>尾数 + 阶码</strong>的计算机计数方式，则可以表示为：</p><p><img src="/2020/05/28/c_float/6.png" alt></p><ul><li><strong>符号位</strong>：0</li><li><strong>阶码（E）部分</strong>：若以<code>float</code>为例，应为 <code>127 +（2）= 129</code>，因此二进制表示为：<code>10000001</code></li><li><strong>尾数部分（M）</strong>：<code>1001011100...</code>，其实它本身无限不循环，但若以<code>float</code>型精度来截取<code>23</code>位，则可以表示为<code>10010111000010100011111</code></li></ul><p>因此最终的总结果为（以<code>32</code>位精度<code>float</code>表示）：</p><p><code>01000000110010111000010100011111</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;浮点数在计算机中是如何表示的？&quot;&gt;&lt;a href=&quot;#浮点数在计算机中是如何表示的？&quot; class=&quot;headerlink&quot; title=&quot;浮点数在计算机中是如何表示的？&quot;&gt;&lt;/a&gt;浮点数在计算机中是如何表示的？&lt;/h2&gt;&lt;p&gt;浮点数在计算机中的存储方式遵循IEE
      
    
    </summary>
    
    
      <category term="C语言" scheme="https://zhaops-hub.github.io/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C语言" scheme="https://zhaops-hub.github.io/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>TCP之Nagle算法&amp;&amp;延迟ACK</title>
    <link href="https://zhaops-hub.github.io/2020/05/27/tcpip_nagle/"/>
    <id>https://zhaops-hub.github.io/2020/05/27/tcpip_nagle/</id>
    <published>2020-05-27T14:41:08.000Z</published>
    <updated>2020-05-27T15:35:23.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nagle算法"><a href="#Nagle算法" class="headerlink" title="Nagle算法"></a>Nagle算法</h2><p>是为了减少广域网的小分组数目，从而减小网络拥塞的出现；</p><p>该算法要求一个tcp连接上最多只能有一个未被确认的未完成的小分组，在该分组ack到达之前不能发送其他的小分组，tcp需要收集这些少量的分组，并在ack到来时以一个分组的方式发送出去；其中小分组的定义是小于MSS的任何分组；</p><p>该算法的优越之处在于它是自适应的，确认到达的越快，数据也就发哦送的越快；而在希望减少微小分组数目的低速广域网上，则会发送更少的分组；</p><h2 id="延迟ACK"><a href="#延迟ACK" class="headerlink" title="延迟ACK"></a>延迟ACK</h2><p>如果tcp对每个数据包都发送一个ack确认，那么只是一个单独的数据包为了发送一个ack代价比较高，所以tcp会延迟一段时间，如果这段时间内有数据发送到对端，则捎带发送ack，如果在延迟ack定时器触发时候，发现ack尚未发送，则立即单独发送；</p><p>延迟ACK好处</p><ul><li>避免糊涂窗口综合症；</li><li>发送数据的时候将ack捎带发送，不必单独发送ack；</li><li>如果延迟时间内有多个数据段到达，那么允许协议栈发送一个ack确认多个报文段；</li></ul><h2 id="当Nagle遇上延迟ACK"><a href="#当Nagle遇上延迟ACK" class="headerlink" title="当Nagle遇上延迟ACK"></a>当Nagle遇上延迟ACK</h2><p>试想如下典型操作，写-写-读，即通过多个写小片数据向对端发送单个逻辑的操作，两次写数据长度小于MSS，当第一次写数据到达对端后，对端延迟ack，不发送ack，而本端因为要发送的数据长度小于MSS，所以nagle算法起作用，数据并不会立即发送，而是等待对端发送的第一次数据确认ack；这样的情况下，需要等待对端超时发送ack，然后本段才能发送第二次写的数据，从而造成延迟；</p><p><code>MSS</code>（Maximum Segment Size，最大报文段大小）的概念是指TCP层所能够接收的最大段大小，该值只包括TCP段的数据部分，不包括选项部分。</p><h2 id="关闭Nagle算法"><a href="#关闭Nagle算法" class="headerlink" title="关闭Nagle算法"></a>关闭Nagle算法</h2><p>使用TCP套接字选项TCP_NODELAY可以关闭套接字选项;</p><p>如下场景考虑关闭Nagle算法：</p><ul><li>对端不向本端发送数据，并且对延时比较敏感的操作；这种操作没法捎带ack；</li><li>如上写-写-读操作；对于此种情况，优先使用其他方式，而不是关闭Nagle算法：</li></ul><p>–使用writev，而不是两次调用write，单个writev调用会使tcp输出一次而不是两次，只产生一个tcp分节，这是首选方法；</p><p>–把两次写操作的数据复制到单个缓冲区，然后对缓冲区调用一次write；</p><p>–关闭Nagle算法，调用write两次；有损于网络，通常不考虑；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Nagle算法&quot;&gt;&lt;a href=&quot;#Nagle算法&quot; class=&quot;headerlink&quot; title=&quot;Nagle算法&quot;&gt;&lt;/a&gt;Nagle算法&lt;/h2&gt;&lt;p&gt;是为了减少广域网的小分组数目，从而减小网络拥塞的出现；&lt;/p&gt;
&lt;p&gt;该算法要求一个tcp连接上最多
      
    
    </summary>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/categories/tcp-ip/"/>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 MongoDB + MongoDB-express</title>
    <link href="https://zhaops-hub.github.io/2020/05/27/mongodb_install/"/>
    <id>https://zhaops-hub.github.io/2020/05/27/mongodb_install/</id>
    <published>2020-05-27T14:41:08.000Z</published>
    <updated>2020-05-27T14:42:00.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB-Docker-镜像安装"><a href="#MongoDB-Docker-镜像安装" class="headerlink" title="MongoDB Docker 镜像安装"></a>MongoDB Docker 镜像安装</h2><p>MongoDB 提供官方镜像，下载安装镜像方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取mongo镜像</span></span><br><span class="line">docker pull mongo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取管理页面镜像</span></span><br><span class="line">docker pull mongo-express</span><br></pre></td></tr></table></figure><h2 id="MongoDB-容器创建"><a href="#MongoDB-容器创建" class="headerlink" title="MongoDB 容器创建"></a>MongoDB 容器创建</h2><h3 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongo -p 27017:27017 -v /opt/mongodb/:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=abc123 -d mongo</span><br></pre></td></tr></table></figure><p><code>-p</code> 指定容器的端口映射，mongodb 默认端口为 27017</p><p><code>-v</code> 为设置容器的挂载目录，这里是将/opt/mongodb/即本机中的目录挂载到容器中的/data/db中，作为 mongodb 的存储目录</p><p><code>MONGO_INITDB_ROOT_USERNAME</code> 环境变量，root用户名</p><p><code>MONGO_INITDB_ROOT_PASSWORD</code> 环境变量，root密码</p><p><code>--name</code> 为设置该容器的名称</p><p><code>-d</code> 设置容器以守护进程方式运行</p><p><img src="/2020/05/27/mongodb_install/1.png" alt></p><h3 id="mongo-express"><a href="#mongo-express" class="headerlink" title="mongo-express"></a>mongo-express</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mongo-express --link mongo  -d -p 8081:8081 -e ME_CONFIG_OPTIONS_EDITORTHEME="3024-night" -e ME_CONFIG_BASICAUTH_USERNAME="mongoexpress" -e ME_CONFIG_BASICAUTH_PASSWORD="mongoexpress" -e ME_CONFIG_MONGODB_ADMINUSERNAME="admin" -e ME_CONFIG_MONGODB_ADMINPASSWORD="abc123"  mongo-express</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yaml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"27017:27017"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD=abc123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span> </span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">"journald"</span></span><br><span class="line">  <span class="attr">mongo-express:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo-express:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo-express</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8081:8081"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_OPTIONS_EDITORTHEME=3024-night</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_BASICAUTH_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_BASICAUTH_PASSWORD=abc123</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_ADMINUSERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ME_CONFIG_MONGODB_ADMINPASSWORD=abc123</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">"journald"</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f mongo.yml up -d</span><br></pre></td></tr></table></figure><p><strong>如果发现密码登录失败，请确认安装之前 宿主机的映射目录里面是空的  /opt/mongodb</strong></p><p><img src="/2020/05/27/mongodb_install/2.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MongoDB-Docker-镜像安装&quot;&gt;&lt;a href=&quot;#MongoDB-Docker-镜像安装&quot; class=&quot;headerlink&quot; title=&quot;MongoDB Docker 镜像安装&quot;&gt;&lt;/a&gt;MongoDB Docker 镜像安装&lt;/h2&gt;&lt;p&gt;Mo
      
    
    </summary>
    
    
      <category term="MongoDB" scheme="https://zhaops-hub.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://zhaops-hub.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>TCP半打开连接及同时打开同时关闭</title>
    <link href="https://zhaops-hub.github.io/2020/05/24/tcpip_halfopen/"/>
    <id>https://zhaops-hub.github.io/2020/05/24/tcpip_halfopen/</id>
    <published>2020-05-24T12:41:08.000Z</published>
    <updated>2020-05-27T14:40:23.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP半打开连接"><a href="#TCP半打开连接" class="headerlink" title="TCP半打开连接"></a>TCP半打开连接</h3><p>如果一方已经关闭或者异常终止连接而另外一方却还不知道，这样的连接就称为半打开连接（Half open connection）。处于半打开的连接，如果双方不进行数据通信，是发现不了问题的，只有在通信是才真正的察觉到这个连接已经处于半打开状态，如果双方不传输数据的话，仍处于连接状态的一方就不会检测另外一方已经出现异常</p><p>半打开连接的一个常见的原因是客户端或者服务器突然掉电而不是正常的结束应用程序后再关机，这样即使重新启动后，原来的连接信息已经消失了，对端仍然保持半打开状态，如果需要发数据的话，这边收到之后 其实发现这个连接并不存在了，就会回复RST包告知，这个时候就需要重新建立连接了！</p><p>接下来使用SSH协议复制一下这个场景：</p><ul><li>telnet 链接centos服务器 192.168.179.130 23</li><li>建立连接成功，可以在client进行linux操作</li></ul><p><img src="/2020/05/24/tcpip_halfopen/1.png" alt></p><ul><li><p>需要模拟服务器出现异常，先关掉网卡，然后关机（关掉网卡，为了避免关机时服务器主动退出发送FIN包）</p><ul><li><p>我这边复现不了，管理网卡客户端这边就立马监听到断开了；直接关机的话就发送 FIN包了</p><p><img src="/2020/05/24/tcpip_halfopen/2.png" alt></p></li></ul></li><li><p>重新打开服务器</p></li><li><p>操作客户端，发现已经出现了异常，无法通信，并提示重新连接， 这个时候实际上客户端发送的包被服务器给RST了，因为之前的连接信息已经丢失了</p></li><li><p>重新连接之后可以正常的进行通信</p></li><li><p>服务器重新启动，之前的连接信息都已经丢失，所以它将复位所有信息，因此它不知道数据报文段提到的连接，<strong>处理原则就是接收方以复位做应答</strong></p></li></ul><h3 id="同时打开"><a href="#同时打开" class="headerlink" title="同时打开"></a>同时打开</h3><p>两个应用程序同时彼此执行主动打开的情况，2端的端口需要一致，这就需要双方都熟知端口，这种情况发生的概率很小 ，这里简单的介绍一下</p><p>场景：</p><ul><li><p>PC1的应用程序使用端口7777 与PC2的端口8888  执行主动打开</p></li><li><p>PC2的应用程序使用端口8888 与PC1的端口7777 执行主动打开</p></li><li><p>SYN包同时打开对端，这种情况即为同时打开</p></li></ul><p>  <strong>TCP中，对于同时打开它仅建立一条连接而不是两条连接</strong>，状态变迁图如下：同时发送SYN包，然后收到进行确认直接进入ESTABLISHED状态，可以看到同时打开需要连接建立需要4个报文段，比三次握手多一次！</p><p>  <img src="/2020/05/24/tcpip_halfopen/3.png" alt></p><p>这种情况复现不了，用书上的一张图</p><p>​    <img src="/2020/05/24/tcpip_halfopen/4.png" alt></p><p>第 1,2行 执行2个 SYN ,第3,4行执行了2个 SYN,ACK</p><h3 id="同时关闭"><a href="#同时关闭" class="headerlink" title="同时关闭"></a>同时关闭</h3><p>有同时打开，理所应当的也有同时关闭的场景，TCP协议也允许同时关闭。状态变化可以看到下图了，同时发送FIN包，两端同时执行主动关闭，进入FIN_WAIT_1的状态，从FIN_WAIT_1状态收到FIN包的时候进入CLOSING状态，然后回复ACK，进入TIME_WAIT状态。</p><p><img src="/2020/05/24/tcpip_halfopen/5.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TCP半打开连接&quot;&gt;&lt;a href=&quot;#TCP半打开连接&quot; class=&quot;headerlink&quot; title=&quot;TCP半打开连接&quot;&gt;&lt;/a&gt;TCP半打开连接&lt;/h3&gt;&lt;p&gt;如果一方已经关闭或者异常终止连接而另外一方却还不知道，这样的连接就称为半打开连接（Half 
      
    
    </summary>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/categories/tcp-ip/"/>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>TCP协议连接复位(RST)</title>
    <link href="https://zhaops-hub.github.io/2020/05/24/tcpip_rst/"/>
    <id>https://zhaops-hub.github.io/2020/05/24/tcpip_rst/</id>
    <published>2020-05-24T12:41:08.000Z</published>
    <updated>2020-05-24T09:16:22.464Z</updated>
    
    <content type="html"><![CDATA[<p>tcp连接异常终止的情况。一般来说，导致这种情况的原因一般有很多种，比如：</p><ul><li><p>拒绝连接请求，比如：A想和B建立tcp连接，但是A的连接请求中使用了一个不存在的端口（比如：这个端口超出65535的范围），那么B就可以发送RST报文段拒绝这个请求。</p></li><li><p>异常终止连接，如:A和B的tcp连接出现了异常，然后B希望终止这条异常的连接，于是就可以发送一个RST报文段终止这个连接</p></li><li><p>终止空闲的连接，如A和B之间的tcp连接已经很久没有传输数据了，空闲太长时间，可以发送RST报文段来终止这个连接。</p></li></ul><p>  这里我们只针对拒绝连接请求和异常终止连接做详细介绍。</p><h3 id="拒绝连接"><a href="#拒绝连接" class="headerlink" title="拒绝连接"></a>拒绝连接</h3><p><img src="/2020/05/24/tcpip_rst/1.png" alt></p><p>拒绝连接一般是由服务器主动发起的，因为客户端发起请求连接携带的目的端口，可能服务器并没有开启LISTEN状态。因此服务器在收到这样的报文段后会发送一个RST报文段，在这个报文里把RST和ACK都置为1，它确认了SYN报文段并同时重置了该tcp连接，然后服务器等待另一个连接。客户端在收到RST+ACK报文段后就会进入CLOSED状态。</p><p>telnet 登录一个没有的端口，用wireshark 抓包查看</p><p>telnet登录和发送SYN序号</p><p><img src="/2020/05/24/tcpip_rst/2.png" alt></p><p><img src="/2020/05/24/tcpip_rst/3.png" alt></p><p>服务端抓包服务器，rst，ack 报文</p><p><img src="/2020/05/24/tcpip_rst/4.png" alt></p><h3 id="异常终止连接"><a href="#异常终止连接" class="headerlink" title="异常终止连接"></a>异常终止连接</h3><p><img src="/2020/05/24/tcpip_rst/5.png" alt></p><p>出现异常终止连接的原因有很多种，可能是进程出现bug了或者由于数据出现了不一致（不想发送数据了），对于这种情况，tcp有可能终止一条连接。也就是说，在这些情况下，就可以发送RST报文段异常终止连接。</p><p>客户端由于队列中的数据出现了不一致，发送了RST+ACK报文段异常终止连接，注意：在发送RST+ACK报文段的时候会丢弃掉队列中的所有数据，服务器也会把队列中的所有数据都丢弃掉，并通过一个ICMP差错报告报文通知服务器，然后双方都进入CLOSED状态。</p><p>在一些情况下，我们可能想让服务端把数据发送完，然后再关闭tcp连接，而不是马上发送RST报文终止这条连接，那么可以在套接字编程中使用SO_LINGER选项。SO_LINGER选项是用来设置延迟关闭的时间，等待套接字发送缓冲区中的数据发送完成，但是并不保证数据一定会被对方接收，只是等待一段时间后，再正常关闭tcp连接。如果SO_LINGER设置为0，则会清除队列中的所有数据，直接发送RST报文关闭连接</p><p><strong>需要注意的是：对于RST报文段，另一端不需要发送任何响应，因为发送完RST报文后，这条tcp连接就关闭了，也就没有必要确认了</strong>，收到RST的一方将终止该连接，并通知应用层复位连接。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;tcp连接异常终止的情况。一般来说，导致这种情况的原因一般有很多种，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;拒绝连接请求，比如：A想和B建立tcp连接，但是A的连接请求中使用了一个不存在的端口（比如：这个端口超出65535的范围），那么B就可以发送RST报文段拒绝这个请求。
      
    
    </summary>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/categories/tcp-ip/"/>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>为什么TCP4次挥手时等待为2MSL？</title>
    <link href="https://zhaops-hub.github.io/2020/05/24/tcpip_2msl/"/>
    <id>https://zhaops-hub.github.io/2020/05/24/tcpip_2msl/</id>
    <published>2020-05-24T12:41:08.000Z</published>
    <updated>2020-05-24T06:18:17.361Z</updated>
    
    <content type="html"><![CDATA[<p>通信所要解决的首要问题就是，<strong>保持通信双方的信息对称，使通信双方处于同步状态。</strong></p><p>先来一个例子：<br>罗密欧大学期间写信给中学同学朱丽叶，信的内容如下：</p><p><strong>小叶子，我喜欢你！</strong></p><p>这封信发出之后，罗密欧无法知道朱丽叶能否收到，只有收到小叶子的回信，才能知道自己的信已经到达对方。</p><p>三天之后，小叶子回信了，信的内容如下：</p><p><strong>小欧，来信已阅，我也喜欢你…</strong></p><p>此时，小叶子眼中双方的状态是：<strong>互相爱慕</strong>！</p><p>如果小欧收到回信，小欧眼中双方的状态也是：互相爱慕！</p><p>如果小欧没有收到回信，小欧眼中双方的状态是：<strong>单相思</strong>！</p><p>小叶子为了杜绝小欧模棱两可的状态，使他与自己达成“<strong>互相爱慕</strong>”的共识，需要做以下工作：</p><p>1）先耐心地等小欧的第三封信</p><p>2）如果若干天没有收到回信，需要把自己的第二封信再次发出</p><p>如果收到了小欧的回信，那么双方的状态终于同步了：“互相爱慕”！</p><p>即使2）发生了，N天之后也可以达成同步状态。</p><p>之后，双方可以甜言蜜语地谈恋爱了。</p><p>TCP四次挥手也遵循相似的套路。</p><p>主动断开的一侧为A，被动断开的一侧为B。</p><p><strong>第一个消息：A发FIN</strong></p><p><strong>第二个消息：B回复ACK（回复的同时把tcp链接关掉，tcp处于半关闭状态）</strong></p><p><strong>第三个消息：B发出FIN</strong></p><p>此时此刻：B单方面认为自己与A达成了共识，即双方都同意关闭连接。</p><p>此时，B能释放这个TCP连接占用的内存资源吗？<strong>不能，B一定要确保A收到自己的ACK、FIN。</strong></p><p>所以B需要静静地等待A的第四个消息的到来：</p><p><strong>第四个消息：A发出ACK，用于确认收到B的FIN</strong></p><p>当B接收到此消息，即认为双方达成了同步：双方都知道连接可以释放了，此时B可以安全地释放此TCP连接所占用的内存资源、端口号。</p><p>所以<strong>被动关闭的B无需任何wait time，直接释放资源。</strong></p><p>但，A并不知道B是否接到自己的ACK，A是这么想的：</p><p>1）如果B没有收到自己的ACK，会超时重传FiN</p><p>那么A再次接到重传的FIN，会再次发送ACK</p><p>2）如果B收到自己的ACK，也不会再发任何消息，包括ACK</p><p>无论是1还是2，A都需要等待，要取这两种情况等待时间的最大值，<strong>以应对最坏的情况发生</strong>，这个最坏情况是：</p><p>去向ACK消息最大存活时间（MSL) + 来向FIN消息的最大存活时间(MSL)。</p><p>这恰恰就是<strong>2MSL( Maximum Segment Life)。</strong></p><p>等待2MSL时间，A就可以放心地释放TCP占用的资源、端口号，<strong>此时可以使用该端口号连接任何服务器。</strong></p><p><strong>为何一定要等2MSL？</strong><br><strong>如果不等，释放的端口可能会重连刚断开的服务器端口，这样依然存活在网络里的老的TCP报文可能与新TCP连接报文冲突，造成数据冲突，为避免此种情况，需要耐心等待网络老的TCP连接的活跃报文全部死翘翘，2MSL时间可以满足这个需求（尽管非常保守）！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通信所要解决的首要问题就是，&lt;strong&gt;保持通信双方的信息对称，使通信双方处于同步状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先来一个例子：&lt;br&gt;罗密欧大学期间写信给中学同学朱丽叶，信的内容如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小叶子，我喜欢你！&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/categories/tcp-ip/"/>
    
    
      <category term="tcp/ip" scheme="https://zhaops-hub.github.io/tags/tcp-ip/"/>
    
  </entry>
  
  <entry>
    <title>zhaops&#39;s blog</title>
    <link href="https://zhaops-hub.github.io/2020/05/23/README/"/>
    <id>https://zhaops-hub.github.io/2020/05/23/README/</id>
    <published>2020-05-23T12:41:08.000Z</published>
    <updated>2020-05-23T15:05:03.175Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/23/README/index.jpeg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/23/README/index.jpeg&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>DockerFile 使用</title>
    <link href="https://zhaops-hub.github.io/2020/05/23/docker_dockerfile/"/>
    <id>https://zhaops-hub.github.io/2020/05/23/docker_dockerfile/</id>
    <published>2020-05-23T12:41:08.000Z</published>
    <updated>2020-05-24T02:39:02.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是dockerfile"><a href="#什么是dockerfile" class="headerlink" title="什么是dockerfile?"></a>什么是dockerfile?</h3><p>Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。</p><p>docker build命令用于从Dockerfile构建映像。可以在docker build命令中使用-f标志指向文件系统中任何位置的Dockerfile。<br>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile</span><br></pre></td></tr></table></figure><h3 id="Dockerfile的基本结构"><a href="#Dockerfile的基本结构" class="headerlink" title="Dockerfile的基本结构"></a>Dockerfile的基本结构</h3><p>Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。</p><h3 id="Dockerfile文件说明"><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h3><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是FROM。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。</p><h3 id="docker-build-命令详解"><a href="#docker-build-命令详解" class="headerlink" title="docker build 命令详解"></a>docker build 命令详解</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"></span><br><span class="line">--build-arg=[] :设置镜像创建时的变量；</span><br><span class="line"></span><br><span class="line">--cpu-shares :设置 cpu 使用权重；</span><br><span class="line"></span><br><span class="line">--cpu-period :限制 CPU CFS周期；</span><br><span class="line"></span><br><span class="line">--cpu-quota :限制 CPU CFS配额；</span><br><span class="line"></span><br><span class="line">--cpuset-cpus :指定使用的CPU id；</span><br><span class="line"></span><br><span class="line">--cpuset-mems :指定使用的内存 id；</span><br><span class="line"></span><br><span class="line">--disable-content-trust :忽略校验，默认开启；</span><br><span class="line"></span><br><span class="line">-f :指定要使用的Dockerfile路径；</span><br><span class="line"></span><br><span class="line">--force-rm :设置镜像过程中删除中间容器；</span><br><span class="line"></span><br><span class="line">--isolation :使用容器隔离技术；</span><br><span class="line"></span><br><span class="line">--label=[] :设置镜像使用的元数据；</span><br><span class="line"></span><br><span class="line">-m :设置内存最大值；</span><br><span class="line"></span><br><span class="line">--memory-swap :设置Swap的最大值为内存+swap，"-1"表示不限swap；</span><br><span class="line"></span><br><span class="line">--no-cache :创建镜像的过程不使用缓存；</span><br><span class="line"></span><br><span class="line">--pull :尝试去更新镜像的新版本；</span><br><span class="line"></span><br><span class="line">--quiet, -q :安静模式，成功后只输出镜像 ID；</span><br><span class="line"></span><br><span class="line">--rm :设置镜像成功后删除中间容器；</span><br><span class="line"></span><br><span class="line">--shm-size :设置/dev/shm的大小，默认值是64M；</span><br><span class="line"></span><br><span class="line">--ulimit :Ulimit配置。</span><br><span class="line"></span><br><span class="line">--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span><br><span class="line"></span><br><span class="line">--network: 默认 default。在构建期间设置RUN指令的网络模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 实例</span><br><span class="line"></span><br><span class="line">// 使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。</span><br><span class="line">docker build -t runoob/ubuntu:v1 . </span><br><span class="line"></span><br><span class="line">// 使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。</span><br><span class="line">docker build github.com/creack/docker-firefox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 也可以通过 -f Dockerfile 文件的位置：</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -f /path/to/a/Dockerfile .</span></span><br><span class="line"></span><br><span class="line">// 在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t <span class="built_in">test</span>/myapp .</span></span><br><span class="line">Sending build context to Docker daemon 2.048 kB</span><br><span class="line">Error response from daemon: Unknown instruction: RUNCMD</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是dockerfile&quot;&gt;&lt;a href=&quot;#什么是dockerfile&quot; class=&quot;headerlink&quot; title=&quot;什么是dockerfile?&quot;&gt;&lt;/a&gt;什么是dockerfile?&lt;/h3&gt;&lt;p&gt;Dockerfile是一个包含用于组合映像的命令
      
    
    </summary>
    
    
      <category term="docker" scheme="https://zhaops-hub.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://zhaops-hub.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Apollo(阿波罗)分布式部署.md</title>
    <link href="https://zhaops-hub.github.io/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/"/>
    <id>https://zhaops-hub.github.io/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/</id>
    <published>2020-05-23T12:41:08.000Z</published>
    <updated>2020-05-23T14:24:37.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。<br><a href="https://github.com/zhaops-hub/apollo" target="_blank" rel="noopener">github地址</a>  </p><p>直接搭建多环境Apollo  </p><p>Apollo目前支持以下环境：</p><ul><li>DEV: 开发环境</li><li>FAT：测试环境，相当于alpha环境(功能测试)</li><li>UAT：集成环境，相当于beta环境（回归测试）</li><li>PRO：生产环境  </li></ul><p>如果希望添加自定义的环境名称，<a href="https://github.com/ctripcorp/apollo/wiki/%E9%83%A8%E7%BD%B2&%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98#42-%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">具体步骤可以参考</a></p><p><strong>本次部署 dev pro 两套环境</strong></p><table><thead><tr><th>IP</th><th>部署</th></tr></thead><tbody><tr><td>172.16.100.222</td><td>dev环境，mysql，包含管理页面 portal</td></tr><tr><td>172.16.100.101</td><td>pro环境</td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>本次部署是用docker部署<br>因为官方没有提供现成的镜像，但是提供了DockerFile ，需要自己打包</p><h3 id="下载源码自己编译，或者直接去github上去下载Release包"><a href="#下载源码自己编译，或者直接去github上去下载Release包" class="headerlink" title="下载源码自己编译，或者直接去github上去下载Release包"></a>下载源码自己编译，或者直接去github上去下载Release包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 下载源码</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;ctripcorp&#x2F;apollo.git</span><br></pre></td></tr></table></figure><p>结构如下  </p><ul><li>apollo-portal: 这个是管理页面</li><li>apollo-adminservice: apollo 服务端，相当于后台服务</li><li>apollo-configservice: apollo 注册中心</li></ul><p>一套环境（apollo-adminservice，apollo-configservice）两个服务，apollo-portal只部署一个就可以，可以配置多个环境进行管理</p><p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_1.png" alt="image"></p><p>编译代码（必须先装jdk 和 Maven ）<br>windows 直接双击 build.bat<br>linux build.sh<br><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_2.png" alt="image"></p><p>编译完的截图</p><p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_3.png" alt="image"></p><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>Apollo服务端共需要两个数据库：ApolloPortalDB和ApolloConfigDB，我们把数据库、表的创建和样例数据都分别准备了sql文件，只需要导入数据库即可。  </p><p>需要注意的是ApolloPortalDB只需要在生产环境部署一个即可，而ApolloConfigDB需要在每个环境部署一套，如fat、uat和pro分别部署3套ApolloConfigDB。</p><p>脚本在源码里面   </p><p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_4.png" alt="image"></p><p>命令行进入到mysql里面，source apolloportaldb.sql source ApolloPortalDB.sql ，或者直接navicat导入  </p><p> <img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_5.png" alt="image"></p><h4 id="打包镜像-apollo-configservice"><a href="#打包镜像-apollo-configservice" class="headerlink" title="打包镜像 apollo-configservice"></a>打包镜像 apollo-configservice</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 先打包镜像，先找到源码里面的DockerFile</span><br><span class="line"># apollo-configservice &gt; src &gt; main &gt; docker &gt; DockerFile</span><br><span class="line"></span><br><span class="line"># Dockerfile for apollo-configservice</span><br><span class="line"># 1. Copy apollo-configservice-$&#123;VERSION&#125;-github.zip to current directory</span><br><span class="line"># 2. Build with: docker build -t apollo-configservice .</span><br><span class="line"># 3. Run with: docker run -p 8080:8080 -e DS_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;fill-in-the-correct-server:3306&#x2F;ApolloConfigDB?characterEncoding&#x3D;utf8&quot; -e DS_USERNAME&#x3D;FillInCorrectUser -e DS_PASSWORD&#x3D;FillInCorrectPassword -d -v &#x2F;tmp&#x2F;logs:&#x2F;opt&#x2F;logs --name apollo-configservice apollo-configservice</span><br><span class="line"></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">MAINTAINER ameizi &lt;sxyx2008@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV VERSION 1.7.0-SNAPSHOT</span><br><span class="line">ENV SERVER_PORT 8080</span><br><span class="line"># DataSource Info</span><br><span class="line">ENV DS_URL &quot;&quot;</span><br><span class="line">ENV DS_USERNAME &quot;&quot;</span><br><span class="line">ENV DS_PASSWORD &quot;&quot;</span><br><span class="line"></span><br><span class="line">RUN echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;main&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;community&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; apk update upgrade \</span><br><span class="line">    &amp;&amp; apk add --no-cache procps unzip curl bash tzdata \</span><br><span class="line">    &amp;&amp; ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime \</span><br><span class="line">    &amp;&amp; echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"></span><br><span class="line">ADD apollo-configservice-$&#123;VERSION&#125;-github.zip &#x2F;apollo-configservice&#x2F;apollo-configservice-$&#123;VERSION&#125;-github.zip</span><br><span class="line"></span><br><span class="line">RUN unzip &#x2F;apollo-configservice&#x2F;apollo-configservice-$&#123;VERSION&#125;-github.zip -d &#x2F;apollo-configservice \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;apollo-configservice&#x2F;apollo-configservice-$&#123;VERSION&#125;-github.zip \</span><br><span class="line">    &amp;&amp; sed -i &#39;$d&#39; &#x2F;apollo-configservice&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; chmod +x &#x2F;apollo-configservice&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; echo &quot;tail -f &#x2F;dev&#x2F;null&quot; &gt;&gt; &#x2F;apollo-configservice&#x2F;scripts&#x2F;startup.sh</span><br><span class="line"></span><br><span class="line">EXPOSE $SERVER_PORT</span><br><span class="line"></span><br><span class="line">CMD [&quot;&#x2F;apollo-configservice&#x2F;scripts&#x2F;startup.sh&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 找到编译好的 apollo-configservice-1.7.0-SNAPSHOT-github.zip 包 ，根据它上面的dockerfile注释，把zip包放到当前目录，就可以打包了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># apollo-configservice &gt; target &gt; apollo-configservice-1.7.0-SNAPSHOT-github.zip</span><br></pre></td></tr></table></figure><p> <img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_6.png" alt="image"></p><p> 把 dockerfile 和 zip包传到服务上 docker build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost configservice]# ls</span><br><span class="line">apollo-configservice-1.7.0-SNAPSHOT-github.zip  Dockerfile</span><br><span class="line">[root@localhost configservice]#  docker build -t apollo-configservice .</span><br><span class="line"></span><br><span class="line"># 打包镜像依赖基础镜像 openjdk:8-jre-alpine，如果有网络会自动下载，内网的可以直接导入</span><br></pre></td></tr></table></figure><h4 id="打包镜像-apollo-adminservice"><a href="#打包镜像-apollo-adminservice" class="headerlink" title="打包镜像 apollo-adminservice"></a>打包镜像 apollo-adminservice</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># 先打包镜像，先找到源码里面的DockerFile</span><br><span class="line"># apollo-adminservice &gt; src &gt; main &gt; docker &gt; DockerFile</span><br><span class="line"></span><br><span class="line"># Dockerfile for apollo-adminservice</span><br><span class="line"># 1. Copy apollo-adminservice-$&#123;VERSION&#125;-github.zip to current directory</span><br><span class="line"># 2. Build with: docker build -t apollo-adminservice .</span><br><span class="line"># 3. Run with: docker run -p 8090:8090 -e DS_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;fill-in-the-correct-server:3306&#x2F;ApolloConfigDB?characterEncoding&#x3D;utf8&quot; -e DS_USERNAME&#x3D;FillInCorrectUser -e DS_PASSWORD&#x3D;FillInCorrectPassword -d -v &#x2F;tmp&#x2F;logs:&#x2F;opt&#x2F;logs --name apollo-adminservice apollo-adminservice</span><br><span class="line"></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">MAINTAINER ameizi &lt;sxyx2008@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV VERSION 1.7.0-SNAPSHOT</span><br><span class="line">ENV SERVER_PORT 8090</span><br><span class="line"># DataSource Info</span><br><span class="line">ENV DS_URL &quot;&quot;</span><br><span class="line">ENV DS_USERNAME &quot;&quot;</span><br><span class="line">ENV DS_PASSWORD &quot;&quot;</span><br><span class="line"></span><br><span class="line">RUN echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;main&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;community&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; apk update upgrade \</span><br><span class="line">    &amp;&amp; apk add --no-cache procps unzip curl bash tzdata \</span><br><span class="line">    &amp;&amp; ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime \</span><br><span class="line">    &amp;&amp; echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"></span><br><span class="line">ADD apollo-adminservice-$&#123;VERSION&#125;-github.zip &#x2F;apollo-adminservice&#x2F;apollo-adminservice-$&#123;VERSION&#125;-github.zip</span><br><span class="line"></span><br><span class="line">RUN unzip &#x2F;apollo-adminservice&#x2F;apollo-adminservice-$&#123;VERSION&#125;-github.zip -d &#x2F;apollo-adminservice \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;apollo-adminservice&#x2F;apollo-adminservice-$&#123;VERSION&#125;-github.zip \</span><br><span class="line">    &amp;&amp; sed -i &#39;$d&#39; &#x2F;apollo-adminservice&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; chmod +x &#x2F;apollo-adminservice&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; echo &quot;tail -f &#x2F;dev&#x2F;null&quot; &gt;&gt; &#x2F;apollo-adminservice&#x2F;scripts&#x2F;startup.sh</span><br><span class="line"></span><br><span class="line">EXPOSE $SERVER_PORT</span><br><span class="line"></span><br><span class="line">CMD [&quot;&#x2F;apollo-adminservice&#x2F;scripts&#x2F;startup.sh&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 找到编译好的 apollo-adminservice-1.7.0-SNAPSHOT-github.zip 包 ，根据它上面的dockerfile注释，把zip包放到当前目录，就可以打包了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># apollo-adminservice &gt; target &gt; apollo-adminservice-1.7.0-SNAPSHOT-github.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 dockerfile 和 zip包传到服务上 docker build</span><br><span class="line"></span><br><span class="line">[root@localhost adminservice]# ls</span><br><span class="line">apollo-adminservice-1.7.0-SNAPSHOT-github.zip  Dockerfile</span><br><span class="line">[root@localhost adminservice]#  docker build -t apollo-adminservice .</span><br></pre></td></tr></table></figure><h4 id="打包镜像-apollo-portal"><a href="#打包镜像-apollo-portal" class="headerlink" title="打包镜像 apollo-portal"></a>打包镜像 apollo-portal</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># 先打包镜像，先找到源码里面的DockerFile</span><br><span class="line"># apollo-portal &gt; src &gt; main &gt; docker &gt; DockerFile</span><br><span class="line"></span><br><span class="line"># Dockerfile for apollo-portal</span><br><span class="line"># 1. Copy apollo-portal-$&#123;VERSION&#125;-github.zip to current directory</span><br><span class="line"># 2. Build with: docker build -t apollo-portal .</span><br><span class="line"># 3. Run with: docker run -p 8070:8070 -e DS_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;fill-in-the-correct-server:3306&#x2F;ApolloPortalDB?characterEncoding&#x3D;utf8&quot; -e DS_USERNAME&#x3D;FillInCorrectUser -e DS_PASSWORD&#x3D;FillInCorrectPassword -e DEV_META&#x3D;http:&#x2F;&#x2F;fill-in-dev-meta-server:8080 -e PRO_META&#x3D;http:&#x2F;&#x2F;fill-in-pro-meta-server:8080 -d -v &#x2F;tmp&#x2F;logs:&#x2F;opt&#x2F;logs --name apollo-portal apollo-portal</span><br><span class="line"></span><br><span class="line">FROM openjdk:8-jre-alpine</span><br><span class="line">MAINTAINER ameizi &lt;sxyx2008@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV VERSION 1.7.0-SNAPSHOT</span><br><span class="line">ENV SERVER_PORT 8070</span><br><span class="line"># DataSource Info </span><br><span class="line">ENV DS_URL &quot;&quot;</span><br><span class="line">ENV DS_USERNAME &quot;&quot;</span><br><span class="line">ENV DS_PASSWORD &quot;&quot;</span><br><span class="line"># Environmental variable declaration (meta server url, different environments should have different meta server addresses)</span><br><span class="line">ENV DEV_META &quot;&quot;</span><br><span class="line">ENV FAT_META &quot;&quot;</span><br><span class="line">ENV UAT_META &quot;&quot;</span><br><span class="line">ENV LPT_META &quot;&quot;</span><br><span class="line">ENV PRO_META &quot;&quot;</span><br><span class="line"></span><br><span class="line">RUN echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;main&quot; &gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; echo &quot;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;alpine&#x2F;v3.8&#x2F;community&quot; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories \</span><br><span class="line">    &amp;&amp; apk update upgrade \</span><br><span class="line">    &amp;&amp; apk add --no-cache procps unzip curl bash tzdata \</span><br><span class="line">    &amp;&amp; ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime \</span><br><span class="line">    &amp;&amp; echo &quot;Asia&#x2F;Shanghai&quot; &gt; &#x2F;etc&#x2F;timezone</span><br><span class="line"></span><br><span class="line">ADD apollo-portal-$&#123;VERSION&#125;-github.zip &#x2F;apollo-portal&#x2F;apollo-portal-$&#123;VERSION&#125;-github.zip</span><br><span class="line"></span><br><span class="line">RUN unzip &#x2F;apollo-portal&#x2F;apollo-portal-$&#123;VERSION&#125;-github.zip -d &#x2F;apollo-portal \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;apollo-portal&#x2F;apollo-portal-$&#123;VERSION&#125;-github.zip \</span><br><span class="line">    &amp;&amp; sed -i &#39;$d&#39; &#x2F;apollo-portal&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; chmod +x &#x2F;apollo-portal&#x2F;scripts&#x2F;startup.sh \</span><br><span class="line">    &amp;&amp; echo &quot;tail -f &#x2F;dev&#x2F;null&quot; &gt;&gt; &#x2F;apollo-portal&#x2F;scripts&#x2F;startup.sh</span><br><span class="line"></span><br><span class="line">EXPOSE $SERVER_PORT</span><br><span class="line"></span><br><span class="line">CMD [&quot;&#x2F;apollo-portal&#x2F;scripts&#x2F;startup.sh&quot;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 找到编译好的 apollo-adminservice-1.7.0-SNAPSHOT-github.zip 包 ，根据它上面的dockerfile注释，把zip包放到当前目录，就可以打包了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># apollo-portal &gt; target &gt; apollo-portal-1.7.0-SNAPSHOT-github.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 把 dockerfile 和 zip包传到服务上 docker build</span><br><span class="line"></span><br><span class="line">[root@localhost portal]# ls</span><br><span class="line">apollo-portal-1.7.0-SNAPSHOT-github.zip  Dockerfile</span><br><span class="line">[root@localhost portal]# docker build -t apollo-portal .</span><br></pre></td></tr></table></figure><h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>都打完镜像查看一下 </p><p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_7.png" alt="image"></p><h4 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h4><p>利用docker-compose 服务编排，比较省事</p><p><strong>apollo.yml</strong></p><p>包含 adminservice,configservice</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  apollo-configservice:</span><br><span class="line">    container_name: configservice</span><br><span class="line">    image: apollo-configservice:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    # ports:</span><br><span class="line">    #   - &quot;8080:8080&quot;</span><br><span class="line">    network_mode: host </span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server2&#x2F;logs&#x2F;apollo-configservice:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 可通过 SERVER_PORT 指定默认启动端口，ports 也需要对应修改</span><br><span class="line">      # SERVER_PORT: 8080</span><br><span class="line">      # 指定 homePageUrl 为当前宿主的 apollo-configservice 地址，不然会出现无法访问</span><br><span class="line">      # JAVA_OPTS: &quot;-Deureka.instance.homePageUrl&#x3D;http:&#x2F;&#x2F;172.16.100.6:8080&quot;</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloConfigDB?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码 </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      # 服务器的端口</span><br><span class="line">      SERVER_PORT: 8080</span><br><span class="line">      </span><br><span class="line">  apollo-adminservice:</span><br><span class="line">    container_name: adminservice</span><br><span class="line">    image: apollo-adminservice:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    # ports:</span><br><span class="line">    #   - &quot;8090:8090&quot;</span><br><span class="line">    network_mode: host </span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server2&#x2F;logs&#x2F;apollo-adminservice:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 指定 homePageUrl 为当前宿主的 apollo-adminservice 地址，不然会出现无法访问</span><br><span class="line">      # JAVA_OPTS: &quot;-Deureka.instance.homePageUrl&#x3D;http:&#x2F;&#x2F;172.16.100.6:8090&quot;</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloConfigDB?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码 </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      # 服务器的端口</span><br><span class="line">      SERVER_PORT: 8090</span><br><span class="line">    depends_on:</span><br><span class="line">      - apollo-configservice</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost apollo]# docker-compose -f apollo.yml up -d</span><br></pre></td></tr></table></figure><p>测试一下</p><p><a href="http://192.168.179.130:8080/" target="_blank" rel="noopener">http://192.168.179.130:8080/</a> 访问8080页面查看注册情况 </p><p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_8.png" alt="image"></p><p><strong>portal.yml</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  apollo-portal:</span><br><span class="line">    image: apollo-portal:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    container_name: apollo-portal</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8070:8070&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server1&#x2F;logs&#x2F;apollo-portal:&#x2F;opt&#x2F;logs  </span><br><span class="line">    environment:</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloPortalDB?characterEncoding&#x3D;utf8&quot; </span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码      </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      # META_SERVER 地址，如 http:&#x2F;&#x2F;192.168.100.234:8080,http:&#x2F;&#x2F;192.168.100.234:8081（多个可用,分隔，建议使用 LB 域名）,</span><br><span class="line">      DEV_META: &quot;http:&#x2F;&#x2F;172.16.100.6:8080&quot;</span><br><span class="line">      PRO_META: &quot;http:&#x2F;&#x2F;172.16.100.6:8080&quot;</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost apollo]# docker-compose -f apollo-portal.yml up -d</span><br></pre></td></tr></table></figure><p>测试一下</p><p><a href="http://192.168.179.130:8070" target="_blank" rel="noopener">http://192.168.179.130:8070</a> 账号密码：apollo,admin </p><p>查看系统信息</p><p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_9.png" alt="image"></p><h3 id="部署多环境"><a href="#部署多环境" class="headerlink" title="部署多环境"></a>部署多环境</h3><p>PRO 生产环境  </p><p>其实多环境其实很简单，就是再多部署一个（adminservice,configservice），portal 就部署一套就可以，可以管理多套环境，注意数据库是一个环境一个数据库</p><p>生产环境只需要安装 adminservice 和 configservice  </p><h4 id="配置数据库-1"><a href="#配置数据库-1" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>生一个 ApolloConfigDBPRO 数据库</p><p>进入mysql命令行 source ApolloConfigDBPRO.sql</p><p>直接把docker-compose.yml 脚本拿来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  apollo-configservice:</span><br><span class="line">    container_name: configservice</span><br><span class="line">    image: apollo-configservice:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    #ports:</span><br><span class="line">    #  - &quot;8080:8080&quot;</span><br><span class="line">    network_mode: host</span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server2&#x2F;logs&#x2F;apollo-configservice:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 可通过 SERVER_PORT 指定默认启动端口，ports 也需要对应修改</span><br><span class="line">      # SERVER_PORT: 8080</span><br><span class="line">      # 指定 homePageUrl 为当前宿主的 apollo-configservice 地址，不然会出现无法访问</span><br><span class="line">      # JAVA_OPTS: &quot;-Deureka.instance.homePageUrl&#x3D;http:&#x2F;&#x2F;172.16.100.6:8080&quot;</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloConfigDBPRO?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码 </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      SERVER_IP: &quot;172.16.100.6&quot;</span><br><span class="line"></span><br><span class="line">  apollo-adminservice:</span><br><span class="line">    container_name: adminservice</span><br><span class="line">    image: apollo-adminservice:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    # ports:</span><br><span class="line">    #   - &quot;8090:8090&quot;</span><br><span class="line">    network_mode: host # 网络模式</span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;servers&#x2F;server2&#x2F;logs&#x2F;apollo-adminservice:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 指定 homePageUrl 为当前宿主的 apollo-adminservice 地址，不然会出现无法访问</span><br><span class="line">      # JAVA_OPTS: &quot;-Deureka.instance.homePageUrl&#x3D;http:&#x2F;&#x2F;172.16.100.6:8090&quot;</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.6:3306&#x2F;ApolloConfigDBPRO?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码 </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      SERVER_PORT: 8090</span><br><span class="line">    depends_on:</span><br><span class="line">      - apollo-configservice</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost apollo]# docker-compose -f apollo.yml up -d</span><br></pre></td></tr></table></figure><p>测试一下</p><p><a href="http://172.16.100.101:8080/" target="_blank" rel="noopener">http://172.16.100.101:8080/</a> 访问8080页面查看注册情况  </p><p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_10.png" alt="image"></p><h3 id="protal-管理页面配置多集群"><a href="#protal-管理页面配置多集群" class="headerlink" title="protal 管理页面配置多集群"></a>protal 管理页面配置多集群</h3><ul><li>找到 apolloportaldb.serverconfig :<ul><li>apollo.portal.envs: dev,pro</li><li>configView.memberOnly.envs: dev,pro</li></ul></li></ul><p>正在环境变量 PRO_META，PRO_META是生产环境对应的变量,直接在docker-compose.yml 配置文件中修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  apollo-portal:</span><br><span class="line">    image: apollo-portal:latest # 镜像地址，这里使用的是直接在当前主机上构建的镜像</span><br><span class="line">    container_name: apollo-portal</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8070:8070&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      # 日志挂载</span><br><span class="line">      - &#x2F;usr&#x2F;local&#x2F;apollo&#x2F;logs&#x2F;apollo-portal:&#x2F;opt&#x2F;logs</span><br><span class="line">    environment:</span><br><span class="line">      # 数据库连接地址</span><br><span class="line">      DS_URL: &quot;jdbc:mysql:&#x2F;&#x2F;172.16.100.222:3306&#x2F;ApolloPortalDB?characterEncoding&#x3D;utf8&quot;</span><br><span class="line">      # 数据库用户名</span><br><span class="line">      DS_USERNAME: &quot;root&quot;</span><br><span class="line">      # 数据库密码      </span><br><span class="line">      DS_PASSWORD: &quot;abc123&quot;</span><br><span class="line">      # META_SERVER 地址，如 http:&#x2F;&#x2F;192.168.100.234:8080,http:&#x2F;&#x2F;192.168.100.234:8081（多个可用,分隔，建议使用 LB 域名）,</span><br><span class="line">      DEV_META: &quot;http:&#x2F;&#x2F;172.16.100.222:8080&quot;</span><br><span class="line">      PRO_META: &quot;http:&#x2F;&#x2F;172.16.100.101:8080&quot;</span><br></pre></td></tr></table></figure><p>重启portal 容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f apollo-portal.yml restart</span><br></pre></td></tr></table></figure><p>查看系统信息</p><p><img src="/2020/05/23/Apollo%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2/apollo_install_11.png" alt="image"></p><p><strong>如果在docker-compose.yml 配置文件里面配置的环境变量不起作用的话</strong><br><strong>首先进入到容器里面查看一下 echo $PRO_META</strong><br><strong>如果输出是空的话，那就是得先把容器卸载再起来，restart 不起作用的。</strong><br><strong>这个一定要注意</strong>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具
      
    
    </summary>
    
    
      <category term="Apollo" scheme="https://zhaops-hub.github.io/categories/Apollo/"/>
    
    
      <category term="Apollo" scheme="https://zhaops-hub.github.io/tags/Apollo/"/>
    
  </entry>
  
</feed>
